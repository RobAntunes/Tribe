This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  __mocks__/
    fileMock.js
    index.tsx
    vscode.ts
  components/
    DecisionHub.tsx
    NotificationCenter.tsx
  icon/
    Tribe.tsx
  media/
    tribe.svg
  panels/
    crew_panel/
      components/
        styles/
          dynamic_flows.css
          flows.css
        ActionPanel.css
        ActionPanel.tsx
        AgentCard.css
        AgentCard.tsx
        ChatWindow.css
        ChatWindow.tsx
        DecisionPanel.css
        DecisionPanel.tsx
        FlowOutput.tsx
        FlowVisualizer.tsx
        GetStarted.css
        GetStarted.tsx
        ProjectChanges.tsx
        TabContent.tsx
        TaskList.css
        TaskList.tsx
      CrewPanel.css
      CrewPanel.test.tsx
      CrewPanel.tsx
      CrewPanelProvider.ts
  styles/
    components.css
  index.tsx
  setupTests.ts
  style.css
  vscode.ts
jest.config.js
package.json
postcss.config.js
tailwind.config.js
tsconfig.json
webpack.config.js

================================================================
Files
================================================================

================
File: src/__mocks__/fileMock.js
================
module.exports = 'test-file-stub';

================
File: src/__mocks__/index.tsx
================
import React from 'react';

export const VsCodeContext = React.createContext({
  postMessage: jest.fn(),
  getState: jest.fn(() => ({})),
  setState: jest.fn()
});

================
File: src/__mocks__/vscode.ts
================
export const getVsCodeApi = jest.fn(() => ({
  postMessage: jest.fn(),
  getState: jest.fn(() => ({})),
  setState: jest.fn()
}));

================
File: src/components/DecisionHub.tsx
================
import React from 'react';
import { Clock, AlertCircle, Check, X } from 'lucide-react';

interface Decision {
    id: string;
    type: 'architecture' | 'implementation' | 'review';
    description: string;
    options: string[];
    impact: 'high' | 'medium' | 'low';
    deadline?: Date;
}

interface DecisionHubProps {
    decisions: Decision[];
    onDecisionMade: (id: string, approved: boolean, option?: string) => void;
}

const DecisionHub: React.FC<DecisionHubProps> = ({ decisions, onDecisionMade }) => {
    const getImpactColor = (impact: string) => {
        switch (impact) {
            case 'high': return 'bg-red-100 text-red-800';
            case 'medium': return 'bg-yellow-100 text-yellow-800';
            case 'low': return 'bg-green-100 text-green-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    return (
        <div className="decision-hub">
            <div className="decision-list">
                {decisions.map(decision => (
                    <div key={decision.id} className="decision-card">
                        <div className="decision-header">
                            <span className={`impact-badge ${getImpactColor(decision.impact)}`}>
                                {decision.impact} impact
                            </span>
                            {decision.deadline && (
                                <div className="deadline">
                                    <Clock className="w-4 h-4" />
                                    <span>{new Date(decision.deadline).toLocaleString()}</span>
                                </div>
                            )}
                        </div>
                        <div className="decision-content">
                            <h3 className="decision-type">{decision.type}</h3>
                            <p className="decision-description">{decision.description}</p>
                            {decision.options.length > 0 && (
                                <div className="decision-options">
                                    {decision.options.map((option, index) => (
                                        <button
                                            key={index}
                                            className="option-button"
                                            onClick={() => onDecisionMade(decision.id, true, option)}
                                        >
                                            {option}
                                        </button>
                                    ))}
                                </div>
                            )}
                        </div>
                        <div className="decision-actions">
                            <button
                                className="approve-button"
                                onClick={() => onDecisionMade(decision.id, true)}
                            >
                                <Check className="w-4 h-4" />
                                Approve
                            </button>
                            <button
                                className="reject-button"
                                onClick={() => onDecisionMade(decision.id, false)}
                            >
                                <X className="w-4 h-4" />
                                Reject
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default DecisionHub;

================
File: src/components/NotificationCenter.tsx
================
import React from 'react';
import { Bell, CheckCircle, AlertTriangle, Info } from 'lucide-react';

interface Notification {
    id: string;
    type: 'alert' | 'info' | 'success';
    message: string;
    timestamp: Date;
    read: boolean;
}

interface NotificationCenterProps {
    notifications: Notification[];
    onNotificationRead: (id: string) => void;
}

const NotificationCenter: React.FC<NotificationCenterProps> = ({ notifications, onNotificationRead }) => {
    const unreadCount = notifications.filter(n => !n.read).length;

    return (
        <div className="notification-center">
            <div className="notification-badge">
                <Bell className="w-5 h-5" />
                {unreadCount > 0 && (
                    <span className="notification-count">{unreadCount}</span>
                )}
            </div>
            <div className="notification-list">
                {notifications.map(notification => (
                    <div 
                        key={notification.id} 
                        className={`notification-item ${notification.read ? 'read' : 'unread'}`}
                        onClick={() => onNotificationRead(notification.id)}
                    >
                        {notification.type === 'success' && <CheckCircle className="w-4 h-4 text-green-500" />}
                        {notification.type === 'alert' && <AlertTriangle className="w-4 h-4 text-red-500" />}
                        {notification.type === 'info' && <Info className="w-4 h-4 text-blue-500" />}
                        <div className="notification-content">
                            <p className="notification-message">{notification.message}</p>
                            <span className="notification-time">
                                {new Date(notification.timestamp).toLocaleTimeString()}
                            </span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default NotificationCenter;

================
File: src/icon/Tribe.tsx
================
import React from "react";

interface TribeProps {
  className?: string;
}

const Tribe: React.FC<TribeProps> = ({ className = "" }) => {
  return (
    <div className={`bg-transparent relative ${className}`}>
      <img 
        src={(window as any).__vscMediaPath + '/tribe.svg'} 
        alt="Tribe Logo"
        style={{ width: '24px', height: '24px' }} 
      />
    </div>
  );
};

export default Tribe;

================
File: src/media/tribe.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="250" zoomAndPan="magnify" viewBox="0 0 375 374.999991" height="250" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><g/><clipPath id="4baed36b97"><path d="M 154 123.207031 L 187 123.207031 L 187 165 L 154 165 Z M 154 123.207031 " clip-rule="nonzero"/></clipPath><clipPath id="c64991500a"><path d="M 153.308594 123.207031 L 187 123.207031 L 187 165.207031 L 153.308594 165.207031 Z M 153.308594 123.207031 " clip-rule="nonzero"/></clipPath></defs><path stroke-linecap="butt" transform="matrix(0.75, 0, 0, 0.75, 23.86954, 106.885855)" fill="none" stroke-linejoin="miter" d="M 46.715616 97.662616 L 21.288531 97.662616 L 21.288531 56.912613 L 114.361454 56.912613 L 114.361454 97.662616 L 88.934369 97.662616 L 88.934369 171.001162 L 46.715616 171.001162 Z M 175.627083 79.558448 L 175.627083 117.876159 L 160.147915 117.876159 C 158.533332 117.876159 157.720832 118.688659 157.720832 120.303242 L 157.720832 171.001162 L 117.611454 171.001162 L 117.611454 121.933451 C 117.611454 113.365742 119.455204 105.928241 123.142704 99.610533 C 126.830204 93.298032 131.965622 88.376157 138.543747 84.850115 C 145.121872 81.318865 152.653123 79.558448 161.142707 79.558448 Z M 178.73125 79.558448 L 218.840627 79.558448 L 218.840627 171.001162 L 178.73125 171.001162 Z M 262.356255 56.912613 L 262.356255 125.360534 C 262.356255 127.641785 263.163547 129.600118 264.783339 131.245951 C 266.429172 132.865743 268.387505 133.673035 270.668756 133.673035 C 272.950006 133.673035 274.903131 132.865743 276.522923 131.245951 C 278.137506 129.600118 278.950006 127.641785 278.950006 125.360534 C 278.950006 123.074076 278.137506 121.100117 276.522923 119.428242 C 274.903131 117.730326 272.950006 116.881367 270.668756 116.881367 L 264.62188 116.881367 L 264.62188 76.813656 L 270.668756 76.813656 C 277.408339 76.813656 283.684381 78.08449 289.491674 80.631365 C 295.304174 83.17824 300.434383 86.730324 304.892716 91.298032 C 309.35105 95.860532 312.825008 101.068866 315.3198 106.93345 C 317.809384 112.798034 319.059384 119.094909 319.059384 125.834493 C 319.059384 132.46991 317.809384 138.730327 315.3198 144.615744 C 312.825008 150.480328 309.35105 155.641786 304.892716 160.094912 C 300.434383 164.553245 295.304174 168.027204 289.491674 170.521996 C 283.684381 173.016788 277.408339 174.261579 270.668756 174.261579 C 264.038547 174.261579 257.77813 173.016788 251.887504 170.521996 C 246.028129 168.027204 240.86667 164.553245 236.408337 160.094912 C 231.955211 155.641786 228.476045 150.480328 225.986461 144.615744 C 223.491669 138.730327 222.241669 132.46991 222.241669 125.834493 L 222.241669 56.912613 Z M 373.965637 129.777201 C 376.382304 128.475118 377.798971 126.657409 378.226054 124.324076 C 378.647929 121.964701 378.132304 119.839701 376.673971 117.954284 C 375.215637 116.048034 372.798971 115.0897 369.429179 115.0897 C 366.590637 114.985534 364.444803 115.782409 362.98647 117.480326 C 361.522928 119.152201 360.76772 121.100117 360.715637 123.329284 C 360.663553 125.558451 361.314595 127.548035 362.663553 129.298035 C 364.01772 131.021993 366.168762 131.886576 369.11147 131.886576 L 415.231265 131.886576 L 415.231265 171.001162 L 369.11147 171.001162 C 362.585428 171.001162 356.496886 169.777204 350.845844 167.339704 C 345.194802 164.896995 340.194802 161.501162 335.845843 157.152203 C 331.496885 152.803245 328.101051 147.803244 325.658343 142.152202 C 323.215634 136.50116 321.996884 130.412618 321.996884 123.886576 C 321.996884 115.318867 323.918759 107.506367 327.767718 100.449074 C 331.642718 93.365741 337.132302 87.688657 344.241677 83.417823 C 351.351053 79.120948 359.79897 76.917823 369.590637 76.813656 C 374.684387 76.813656 379.814596 77.30324 384.99168 78.282406 C 390.163555 79.24074 395.028139 81.08449 399.590639 83.813657 C 404.158348 86.52199 407.950015 90.537615 410.976056 95.870949 C 412.272932 98.152199 413.21564 100.870949 413.798973 104.0272 C 414.408348 107.157408 414.632307 110.381367 414.476057 113.699075 C 414.314598 117.016784 413.637515 120.120951 412.444807 123.011576 C 411.252098 125.876159 409.408348 128.131368 406.913556 129.777201 Z M 373.965637 129.777201 " stroke="#ffffff" stroke-width="4.88997" stroke-opacity="1" stroke-miterlimit="4"/><g fill="#545454" fill-opacity="1"><g transform="translate(38.611727, 235.135847)"><g><path d="M 20.296875 -55.015625 L 1.21875 -55.015625 L 1.21875 -85.578125 L 71.03125 -85.578125 L 71.03125 -55.015625 L 51.953125 -55.015625 L 51.953125 0 L 20.296875 0 Z M 20.296875 -55.015625 "/></g></g></g><g fill="#545454" fill-opacity="1"><g transform="translate(110.854543, 235.135847)"><g><path d="M 44.75 -68.578125 L 44.75 -39.859375 L 33.125 -39.859375 C 31.90625 -39.859375 31.296875 -39.242188 31.296875 -38.015625 L 31.296875 0 L 1.21875 0 L 1.21875 -36.796875 C 1.21875 -43.234375 2.601562 -48.816406 5.375 -53.546875 C 8.144531 -58.273438 11.992188 -61.960938 16.921875 -64.609375 C 21.859375 -67.253906 27.503906 -68.578125 33.859375 -68.578125 Z M 44.75 -68.578125 "/></g></g></g><g fill="#545454" fill-opacity="1"><g transform="translate(156.693896, 235.135847)"><g><path d="M 1.21875 -68.578125 L 31.296875 -68.578125 L 31.296875 0 L 1.21875 0 Z M 1.21875 -68.578125 "/></g></g></g><g fill="#545454" fill-opacity="1"><g transform="translate(189.209271, 235.135847)"><g><path d="M 31.421875 -85.578125 L 31.421875 -34.234375 C 31.421875 -32.515625 32.03125 -31.046875 33.25 -29.828125 C 34.46875 -28.609375 35.9375 -28 37.65625 -28 C 39.363281 -28 40.828125 -28.609375 42.046875 -29.828125 C 43.273438 -31.046875 43.890625 -32.515625 43.890625 -34.234375 C 43.890625 -35.941406 43.273438 -37.425781 42.046875 -38.6875 C 40.828125 -39.957031 39.363281 -40.59375 37.65625 -40.59375 L 33.125 -40.59375 L 33.125 -70.65625 L 37.65625 -70.65625 C 42.707031 -70.65625 47.410156 -69.695312 51.765625 -67.78125 C 56.128906 -65.875 59.984375 -63.207031 63.328125 -59.78125 C 66.671875 -56.351562 69.28125 -52.4375 71.15625 -48.03125 C 73.03125 -43.632812 73.96875 -38.910156 73.96875 -33.859375 C 73.96875 -28.890625 73.03125 -24.203125 71.15625 -19.796875 C 69.28125 -15.398438 66.671875 -11.53125 63.328125 -8.1875 C 59.984375 -4.84375 56.128906 -2.234375 51.765625 -0.359375 C 47.410156 1.503906 42.707031 2.4375 37.65625 2.4375 C 32.6875 2.4375 28 1.503906 23.59375 -0.359375 C 19.195312 -2.234375 15.328125 -4.84375 11.984375 -8.1875 C 8.640625 -11.53125 6.03125 -15.398438 4.15625 -19.796875 C 2.28125 -24.203125 1.34375 -28.890625 1.34375 -33.859375 L 1.34375 -85.578125 Z M 31.421875 -85.578125 "/></g></g></g><g fill="#545454" fill-opacity="1"><g transform="translate(264.263568, 235.135847)"><g><path d="M 40.09375 -30.921875 C 41.882812 -31.898438 42.941406 -33.265625 43.265625 -35.015625 C 43.597656 -36.773438 43.210938 -38.367188 42.109375 -39.796875 C 41.015625 -41.222656 39.203125 -41.9375 36.671875 -41.9375 C 34.554688 -42.007812 32.945312 -41.414062 31.84375 -40.15625 C 30.75 -38.894531 30.179688 -37.425781 30.140625 -35.75 C 30.097656 -34.082031 30.582031 -32.597656 31.59375 -31.296875 C 32.613281 -29.992188 34.226562 -29.34375 36.4375 -29.34375 L 71.03125 -29.34375 L 71.03125 0 L 36.4375 0 C 31.539062 0 26.972656 -0.914062 22.734375 -2.75 C 18.492188 -4.582031 14.742188 -7.128906 11.484375 -10.390625 C 8.222656 -13.648438 5.675781 -17.398438 3.84375 -21.640625 C 2.007812 -25.878906 1.09375 -30.441406 1.09375 -35.328125 C 1.09375 -41.765625 2.539062 -47.628906 5.4375 -52.921875 C 8.332031 -58.222656 12.445312 -62.484375 17.78125 -65.703125 C 23.125 -68.921875 29.460938 -70.570312 36.796875 -70.65625 C 40.628906 -70.65625 44.476562 -70.285156 48.34375 -69.546875 C 52.21875 -68.816406 55.863281 -67.429688 59.28125 -65.390625 C 62.707031 -63.359375 65.5625 -60.347656 67.84375 -56.359375 C 68.820312 -54.648438 69.535156 -52.613281 69.984375 -50.25 C 70.429688 -47.882812 70.59375 -45.457031 70.46875 -42.96875 C 70.351562 -40.488281 69.847656 -38.164062 68.953125 -36 C 68.054688 -33.84375 66.671875 -32.148438 64.796875 -30.921875 Z M 40.09375 -30.921875 "/></g></g></g><g clip-path="url(#4baed36b97)"><path fill="#ef4136" d="M 170.125 164.5 C 170.125 164.5 157.597656 165.175781 154.015625 152.464844 L 156.800781 154.5 C 156.800781 154.5 153.320312 146.621094 161.042969 137.21875 L 162.074219 141.878906 C 162.074219 141.878906 161.214844 127.246094 177.511719 123.761719 C 177.511719 123.761719 173.691406 130.972656 180.394531 144.09375 C 180.394531 144.09375 180.480469 140.949219 183.449219 140.015625 C 183.449219 140.015625 182.90625 142.183594 184.734375 145.261719 C 187.21875 149.460938 187.027344 154.753906 183.996094 158.582031 C 181.324219 161.953125 176.828125 164.660156 170.125 164.5 Z M 170.125 164.5 " fill-opacity="1" fill-rule="nonzero"/></g><g clip-path="url(#c64991500a)"><path fill="#000000" d="M 169.777344 165.011719 C 168.820312 165.011719 166.1875 164.894531 163.230469 163.71875 C 159.855469 162.382812 155.4375 159.367188 153.527344 152.605469 C 153.46875 152.398438 153.546875 152.175781 153.726562 152.050781 C 153.90625 151.925781 154.140625 151.929688 154.316406 152.058594 L 155.859375 153.1875 C 155.207031 150.398438 154.730469 144.105469 160.648438 136.898438 C 160.773438 136.746094 160.972656 136.679688 161.160156 136.722656 C 161.347656 136.769531 161.492188 136.917969 161.535156 137.105469 L 161.835938 138.457031 C 162.066406 137.148438 162.480469 135.570312 163.214844 133.917969 C 164.925781 130.082031 168.777344 125.113281 177.40625 123.265625 C 177.597656 123.226562 177.792969 123.300781 177.914062 123.457031 C 178.03125 123.613281 178.050781 123.824219 177.957031 124 C 177.921875 124.0625 174.605469 130.683594 180.199219 142.550781 C 180.625 141.386719 181.546875 140.082031 183.296875 139.53125 C 183.472656 139.476562 183.664062 139.523438 183.796875 139.648438 C 183.933594 139.773438 183.988281 139.960938 183.941406 140.136719 C 183.9375 140.15625 183.488281 142.167969 185.167969 145.003906 C 187.828125 149.492188 187.523438 154.945312 184.394531 158.894531 C 182.105469 161.78125 177.773438 165.183594 170.132812 165.007812 C 170.082031 165.007812 169.960938 165.011719 169.777344 165.011719 Z M 170.125 163.992188 C 170.132812 163.992188 170.132812 163.992188 170.140625 163.992188 C 177.375 164.164062 181.453125 160.972656 183.601562 158.265625 C 186.46875 154.648438 186.742188 149.644531 184.296875 145.519531 C 183.082031 143.46875 182.863281 141.785156 182.871094 140.808594 C 181 141.839844 180.90625 144.003906 180.902344 144.105469 C 180.894531 144.335938 180.734375 144.535156 180.507812 144.585938 C 180.277344 144.636719 180.050781 144.527344 179.945312 144.320312 C 174.5 133.671875 175.859375 126.863281 176.675781 124.476562 C 170.59375 126 166.378906 129.3125 164.144531 134.332031 C 162.394531 138.269531 162.578125 141.816406 162.582031 141.851562 C 162.59375 142.113281 162.40625 142.34375 162.144531 142.382812 C 161.882812 142.417969 161.636719 142.246094 161.578125 141.988281 L 160.78125 138.375 C 158.800781 140.996094 156.6875 144.816406 156.535156 149.34375 C 156.433594 152.355469 157.257812 154.277344 157.265625 154.296875 C 157.355469 154.507812 157.296875 154.753906 157.117188 154.894531 C 156.9375 155.035156 156.6875 155.042969 156.5 154.90625 L 154.980469 153.796875 C 156.5625 158.101562 159.445312 161.117188 163.566406 162.761719 C 167.007812 164.136719 170.070312 163.996094 170.097656 163.992188 C 170.105469 163.992188 170.117188 163.992188 170.125 163.992188 Z M 170.125 163.992188 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#ffdb00" d="M 167.5 162.109375 C 163.707031 160.730469 159.085938 157.167969 161.457031 147.390625 C 161.535156 147.074219 161.957031 147.007812 162.125 147.285156 C 162.835938 148.460938 164.335938 150.632812 166.074219 151.355469 C 166.785156 151.652344 167.503906 150.941406 167.210938 150.230469 C 165.867188 146.949219 163.195312 137.949219 169.8125 129.652344 C 170.039062 129.367188 170.5 129.554688 170.457031 129.917969 C 170.097656 133.007812 169.828125 140.992188 176.046875 144.09375 C 182.976562 147.554688 182.894531 159.738281 174.25 162.375 C 172.039062 163.050781 169.667969 162.898438 167.5 162.109375 Z M 167.5 162.109375 " fill-opacity="1" fill-rule="nonzero"/><path fill="#ffffff" d="M 173.632812 160.230469 C 172.417969 161.894531 169.910156 162.015625 168.648438 160.386719 C 167.824219 159.328125 167.699219 157.683594 169.859375 155.195312 C 173.457031 151.046875 170.863281 146.21875 169.203125 143.914062 C 169.082031 143.746094 169.300781 143.550781 169.453125 143.691406 C 172.394531 146.351562 178.695312 153.296875 173.632812 160.230469 Z M 173.632812 160.230469 " fill-opacity="1" fill-rule="nonzero"/></svg>

================
File: src/panels/crew_panel/components/styles/dynamic_flows.css
================
.flow-container {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.flow-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.flow-header h2 {
    margin: 0;
    color: var(--vscode-editor-foreground);
}

.refresh-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: 1px solid var(--vscode-button-border);
    border-radius: 4px;
    cursor: pointer;
}

.refresh-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.suggested-flows {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

.flow-suggestion {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.flow-suggestion-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.flow-suggestion-header h3 {
    margin: 0;
    color: var(--vscode-editor-foreground);
}

.confidence-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--vscode-editor-background);
}

.flow-steps {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 0.5rem 0;
}

.step-badge {
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
}

.execute-flow-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: 1px solid var(--vscode-button-border);
    border-radius: 4px;
    cursor: pointer;
    margin-top: auto;
}

.execute-flow-button:hover {
    background: var(--vscode-button-hoverBackground);
}

.execute-flow-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.flow-visualization {
    margin-top: 1rem;
    padding: 1rem;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
}

.flow-progress {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
}

.progress-step {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
}

.progress-step.active {
    border-color: var(--vscode-focusBorder);
}

.progress-step.completed {
    border-color: var(--vscode-testing-iconPassed);
    color: var(--vscode-testing-iconPassed);
}

.progress-step.error {
    border-color: var(--vscode-testing-iconFailed);
    color: var(--vscode-testing-iconFailed);
}

================
File: src/panels/crew_panel/components/styles/flows.css
================
.flows-container {
    padding: 1rem;
}

.flow-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.flow-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--vscode-button-border);
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border-radius: 4px;
    cursor: pointer;
}

.flow-button:hover {
    background: var(--vscode-button-hoverBackground);
}

.flow-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.flow-output-container {
    margin-top: 1rem;
    padding: 1rem;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
}

.flow-result {
    margin-top: 1rem;
}

.result-object {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.result-item h4 {
    margin: 0;
    color: var(--vscode-editor-foreground);
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
}

.result-item pre {
    margin: 0;
    padding: 0.5rem;
    background: var(--vscode-textBlockQuote-background);
    border-radius: 4px;
    font-size: 0.9rem;
}

.file-change {
    margin-bottom: 0.5rem;
}

.file-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    cursor: pointer;
    background: var(--vscode-list-hoverBackground);
    border-radius: 4px;
}

.file-header:hover {
    background: var(--vscode-list-activeSelectionBackground);
}

.file-content {
    margin-left: 2rem;
    padding: 0.5rem;
    background: var(--vscode-textBlockQuote-background);
    border-radius: 4px;
}

.file-content pre {
    margin: 0;
    font-size: 0.9rem;
    white-space: pre-wrap;
}

.file-delete {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    color: var(--vscode-errorForeground);
}

.action-buttons {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
}

.accept-button,
.reject-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
}

.accept-button {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: 1px solid var(--vscode-button-border);
}

.reject-button {
    background: var(--vscode-errorBackground);
    color: var(--vscode-errorForeground);
    border: 1px solid var(--vscode-errorForeground);
}

.loading {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    color: var(--vscode-descriptionForeground);
}

.visualization-container {
    margin-top: 1rem;
    padding: 1rem;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
}

================
File: src/panels/crew_panel/components/ActionPanel.css
================
.action-panel {
    padding: 16px;
}

.action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
}

.action-button {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    padding: 16px;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
}

.action-button:hover {
    border-color: var(--vscode-button-background);
}

.action-button h3 {
    margin: 0 0 8px 0;
    font-size: 16px;
}

.action-button p {
    margin: 0;
    font-size: 13px;
    color: var(--vscode-foreground);
    opacity: 0.8;
}

.action-form {
    max-width: 600px;
    margin: 0 auto;
}

.action-form h2 {
    margin: 0 0 16px 0;
}

.description-input {
    width: 100%;
    min-height: 120px;
    padding: 12px;
    margin-bottom: 16px;
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    resize: vertical;
}

.button-group {
    display: flex;
    gap: 8px;
    justify-content: flex-end;
}

================
File: src/panels/crew_panel/components/ActionPanel.tsx
================
import React, { useState } from 'react';
import './ActionPanel.css';

interface ActionPanelProps {
    onCreateAgent: (description: string) => void;
    onCreateTask: (description: string) => void;
    onCreateFlow: (description: string) => void;
    onCreateTool: (description: string) => void;
}

export const ActionPanel: React.FC<ActionPanelProps> = ({
    onCreateAgent,
    onCreateTask,
    onCreateFlow,
    onCreateTool
}) => {
    const [selectedAction, setSelectedAction] = useState<string | null>(null);
    const [description, setDescription] = useState('');

    const handleSubmit = () => {
        if (!selectedAction || !description.trim()) return;

        switch (selectedAction) {
            case 'agent':
                onCreateAgent(description);
                break;
            case 'task':
                onCreateTask(description);
                break;
            case 'flow':
                onCreateFlow(description);
                break;
            case 'tool':
                onCreateTool(description);
                break;
        }

        setDescription('');
        setSelectedAction(null);
    };

    const actions = [
        { id: 'agent', label: 'Create Agent', description: 'Create a new AI agent with specific capabilities' },
        { id: 'task', label: 'Create Task', description: 'Create a new task to be assigned to agents' },
        { id: 'flow', label: 'Create Flow', description: 'Create a new workflow or process' },
        { id: 'tool', label: 'Create Tool', description: 'Create a new tool for agents to use' }
    ];

    return (
        <div className="action-panel">
            {!selectedAction ? (
                <div className="action-grid">
                    {actions.map(action => (
                        <button
                            key={action.id}
                            className="action-button"
                            onClick={() => setSelectedAction(action.id)}
                        >
                            <h3>{action.label}</h3>
                            <p>{action.description}</p>
                        </button>
                    ))}
                </div>
            ) : (
                <div className="action-form">
                    <h2>{actions.find(a => a.id === selectedAction)?.label}</h2>
                    <textarea
                        className="description-input"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        placeholder="Describe your needs..."
                        rows={6}
                    />
                    <div className="button-group">
                        <button 
                            className="button ghost"
                            onClick={() => setSelectedAction(null)}
                        >
                            Cancel
                        </button>
                        <button
                            className="button primary"
                            onClick={handleSubmit}
                            disabled={!description.trim()}
                        >
                            Create
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

================
File: src/panels/crew_panel/components/AgentCard.css
================
.agent-card {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    margin-bottom: 16px;
    transition: all 0.2s ease;
}

.agent-card.selected {
    border-color: var(--vscode-button-background);
}

.agent-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    cursor: pointer;
}

.agent-info h3 {
    margin: 0;
    font-size: 16px;
}

.agent-info .role {
    font-size: 12px;
    color: var(--vscode-foreground);
    opacity: 0.7;
}

.status-badge {
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 12px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
}

.agent-details {
    padding: 16px;
    border-top: 1px solid var(--vscode-panel-border);
}

.agent-summary {
    margin-bottom: 16px;
}

.summary-item {
    margin-bottom: 12px;
}

.summary-item label {
    display: block;
    font-size: 12px;
    margin-bottom: 4px;
    color: var(--vscode-foreground);
    opacity: 0.7;
}

.agent-actions {
    margin-bottom: 16px;
}

.agent-chat {
    height: 300px;
}

================
File: src/panels/crew_panel/components/AgentCard.tsx
================
import React, { useState } from 'react';
import { ChatWindow } from './ChatWindow';
import './AgentCard.css';

interface Agent {
    id: string;
    name: string;
    role: string;
    status: string;
    currentTask?: string;
    crew?: string;
    backstory: string;
}

interface AgentCardProps {
    agent: Agent;
    selected: boolean;
    onSelect: (agent: Agent) => void;
    onSendMessage: (agentId: string, message: string) => void;
    messages: Array<{
        id: string;
        sender: string;
        content: string;
        timestamp: string;
        type: 'user' | 'agent';
    }>;
}

export const AgentCard: React.FC<AgentCardProps> = ({
    agent,
    selected,
    onSelect,
    onSendMessage,
    messages
}) => {
    const [expanded, setExpanded] = useState(false);

    return (
        <div className={`agent-card ${selected ? 'selected' : ''} ${expanded ? 'expanded' : ''}`}>
            <div className="agent-header" onClick={() => setExpanded(!expanded)}>
                <div className="agent-info">
                    <h3>{agent.name}</h3>
                    <span className="role">{agent.role}</span>
                </div>
                <div className="agent-status">
                    <span className={`status-badge ${agent.status.toLowerCase()}`}>
                        {agent.status}
                    </span>
                </div>
            </div>
            
            {expanded && (
                <div className="agent-details">
                    <div className="agent-summary">
                        <div className="summary-item">
                            <label>Current Task:</label>
                            <span>{agent.currentTask || 'None'}</span>
                        </div>
                        <div className="summary-item">
                            <label>Crew:</label>
                            <span>{agent.crew || 'Unassigned'}</span>
                        </div>
                        <div className="summary-item">
                            <label>Backstory:</label>
                            <p>{agent.backstory}</p>
                        </div>
                    </div>
                    
                    <div className="agent-actions">
                        <button 
                            className={`button ${selected ? 'ghost' : 'primary'}`}
                            onClick={() => onSelect(agent)}
                        >
                            {selected ? 'Deselect' : 'Select'}
                        </button>
                    </div>

                    <div className="agent-chat">
                        <ChatWindow
                            messages={messages.filter(m => 
                                m.sender === agent.name || 
                                m.sender === 'You'
                            )}
                            onSendMessage={(message) => onSendMessage(agent.id, message)}
                            placeholder={`Message ${agent.name}...`}
                            disabled={!selected}
                        />
                    </div>
                </div>
            )}
        </div>
    );
};

================
File: src/panels/crew_panel/components/ChatWindow.css
================
.chat-window {
    display: flex;
    flex-direction: column;
    height: 100%;
    min-height: 300px;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
}

.messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.message {
    padding: 8px 12px;
    border-radius: 6px;
    max-width: 80%;
}

.message.user {
    align-self: flex-end;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
}

.message.agent {
    align-self: flex-start;
    background: var(--vscode-editor-inactiveSelectionBackground);
}

.message-header {
    display: flex;
    justify-content: space-between;
    font-size: 12px;
    margin-bottom: 4px;
}

.message-content {
    word-break: break-word;
}

.input-container {
    display: flex;
    gap: 8px;
    padding: 12px;
    border-top: 1px solid var(--vscode-panel-border);
}

.input-field {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
}

.input-field:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

================
File: src/panels/crew_panel/components/ChatWindow.tsx
================
import React, { useState, useRef, useEffect } from 'react';
import './ChatWindow.css';

interface Message {
    id: string;
    sender: string;
    content: string;
    timestamp: string;
    type: 'user' | 'agent';
}

interface ChatWindowProps {
    messages: Message[];
    onSendMessage: (message: string) => void;
    placeholder?: string;
    disabled?: boolean;
}

export const ChatWindow: React.FC<ChatWindowProps> = ({
    messages,
    onSendMessage,
    placeholder = "Type a message...",
    disabled = false
}) => {
    const [currentMessage, setCurrentMessage] = useState('');
    const messagesEndRef = useRef<HTMLDivElement>(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(scrollToBottom, [messages]);

    const handleSend = () => {
        if (currentMessage.trim()) {
            onSendMessage(currentMessage.trim());
            setCurrentMessage('');
        }
    };

    return (
        <div className="chat-window">
            <div className="messages-container">
                {messages.map((message) => (
                    <div key={message.id} className={`message ${message.type}`}>
                        <div className="message-header">
                            <span className="sender">{message.sender}</span>
                            <span className="timestamp">{message.timestamp}</span>
                        </div>
                        <div className="message-content">{message.content}</div>
                    </div>
                ))}
                <div ref={messagesEndRef} />
            </div>
            <div className="input-container">
                <input
                    type="text"
                    value={currentMessage}
                    onChange={(e) => setCurrentMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                    placeholder={placeholder}
                    className="input-field"
                    disabled={disabled}
                />
                <button
                    onClick={handleSend}
                    disabled={!currentMessage.trim() || disabled}
                    className="button primary"
                >
                    Send
                </button>
            </div>
        </div>
    );
};

================
File: src/panels/crew_panel/components/DecisionPanel.css
================
.decision-panel {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.decision-card {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    padding: 16px;
}

.decision-card.high {
    border-color: var(--vscode-errorForeground);
}

.decision-card.medium {
    border-color: var(--vscode-warningForeground);
}

.decision-card.low {
    border-color: var(--vscode-successForeground);
}

.decision-header {
    display: flex;
    gap: 12px;
    margin-bottom: 16px;
}

.type-badge,
.impact-badge {
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 12px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
}

.deadline {
    margin-left: auto;
    font-size: 12px;
    color: var(--vscode-foreground);
    opacity: 0.7;
}

.decision-content {
    margin-bottom: 16px;
}

.options-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 16px;
}

.option {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 16px;
    padding: 12px;
    background: var(--vscode-editor-inactiveSelectionBackground);
    border-radius: 4px;
}

.option p {
    margin: 0;
    flex: 1;
}

.decision-footer {
    display: flex;
    justify-content: flex-end;
    border-top: 1px solid var(--vscode-panel-border);
    padding-top: 16px;
    margin-top: 16px;
}

.empty-state {
    text-align: center;
    padding: 32px;
    color: var(--vscode-foreground);
    opacity: 0.7;
}

================
File: src/panels/crew_panel/components/DecisionPanel.tsx
================
import React from 'react';
import './DecisionPanel.css';

interface Decision {
    id: string;
    type: 'architecture' | 'implementation' | 'review';
    description: string;
    options: string[];
    impact: 'high' | 'medium' | 'low';
    deadline?: Date;
}

interface DecisionPanelProps {
    decisions: Decision[];
    onAccept: (decisionId: string, option: string) => void;
    onReject: (decisionId: string) => void;
}

export const DecisionPanel: React.FC<DecisionPanelProps> = ({
    decisions,
    onAccept,
    onReject
}) => {
    return (
        <div className="decision-panel">
            {decisions.length === 0 ? (
                <div className="empty-state">
                    <p>No pending decisions</p>
                </div>
            ) : (
                decisions.map(decision => (
                    <div key={decision.id} className={`decision-card ${decision.impact}`}>
                        <div className="decision-header">
                            <span className={`type-badge ${decision.type}`}>
                                {decision.type}
                            </span>
                            <span className={`impact-badge ${decision.impact}`}>
                                {decision.impact} impact
                            </span>
                            {decision.deadline && (
                                <span className="deadline">
                                    Due by: {new Date(decision.deadline).toLocaleDateString()}
                                </span>
                            )}
                        </div>
                        
                        <div className="decision-content">
                            <p>{decision.description}</p>
                            
                            <div className="options-list">
                                {decision.options.map((option, index) => (
                                    <div key={index} className="option">
                                        <p>{option}</p>
                                        <button
                                            className="button primary"
                                            onClick={() => onAccept(decision.id, option)}
                                        >
                                            Accept
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                        
                        <div className="decision-footer">
                            <button
                                className="button ghost"
                                onClick={() => onReject(decision.id)}
                            >
                                Reject All
                            </button>
                        </div>
                    </div>
                ))
            )}
        </div>
    );
};

================
File: src/panels/crew_panel/components/FlowOutput.tsx
================
import React from 'react';

interface FlowOutputProps {
    result: any;
    onAction?: (action: string, data: any) => void;
}

export const FlowOutput: React.FC<FlowOutputProps> = ({ result, onAction }) => {
    if (!result) return null;

    return (
        <div className="flow-output-container">
            <div className="flow-result">
                {typeof result === 'string' ? (
                    <pre>{result}</pre>
                ) : (
                    <div className="result-object">
                        {Object.entries(result).map(([key, value]) => (
                            <div key={key} className="result-item">
                                <h4>{key}</h4>
                                <pre>{JSON.stringify(value, null, 2)}</pre>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
};

================
File: src/panels/crew_panel/components/FlowVisualizer.tsx
================
import React from 'react';

interface Visualization {
    type: 'graph' | 'tree' | 'sequence';
    data: any;
}

interface FlowVisualizerProps {
    visualizations: Visualization[];
}

export const FlowVisualizer: React.FC<FlowVisualizerProps> = ({ visualizations }) => {
    const renderVisualization = (visualization: Visualization) => {
        switch (visualization.type) {
            case 'graph':
                return (
                    <div className="graph-visualization">
                        {/* We can integrate with a graph visualization library like react-flow or mermaid */}
                        <pre>{JSON.stringify(visualization.data, null, 2)}</pre>
                    </div>
                );
            case 'tree':
                return (
                    <div className="tree-visualization">
                        <pre>{JSON.stringify(visualization.data, null, 2)}</pre>
                    </div>
                );
            case 'sequence':
                return (
                    <div className="sequence-visualization">
                        <pre>{JSON.stringify(visualization.data, null, 2)}</pre>
                    </div>
                );
            default:
                return null;
        }
    };

    return (
        <div className="flow-visualizer">
            {visualizations.map((visualization, index) => (
                <div key={index} className="visualization-container">
                    {renderVisualization(visualization)}
                </div>
            ))}
        </div>
    );
};

================
File: src/panels/crew_panel/components/GetStarted.css
================
.get-started {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100%;
    padding: 32px;
}

.content {
    max-width: 600px;
    width: 100%;
}

.content h1 {
    margin: 0 0 8px 0;
    font-size: 24px;
}

.subtitle {
    margin: 0 0 32px 0;
    font-size: 16px;
    color: var(--vscode-foreground);
    opacity: 0.8;
}

.form {
    margin-bottom: 24px;
}

.form label {
    display: block;
    margin-bottom: 8px;
    text-align: left;
}

.form textarea {
    width: 80%;
    min-height: 120px;
    padding: 12px;
    margin-bottom: 16px;
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    resize: vertical;
}

.info {
    font-size: 13px;
    color: var(--vscode-foreground);
    opacity: 0.7;
}

================
File: src/panels/crew_panel/components/GetStarted.tsx
================
import React, { useState } from 'react';
import './GetStarted.css';

interface GetStartedProps {
    onSubmit: (description: string) => void;
}

export const GetStarted: React.FC<GetStartedProps> = ({ onSubmit }) => {
    const [description, setDescription] = useState('');

    const handleSubmit = () => {
        if (description.trim()) {
            onSubmit(description);
        }
    };

    return (
        <div className="get-started">
            <div className="content">
                <h1>Welcome to Tribe</h1>
                <p className="subtitle">Let's get started by understanding your project</p>

                <div className="form">
                    <label htmlFor="project-description">
                        Describe your project and goals
                    </label>
                    <textarea
                        id="project-description"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        placeholder="I want to build..."
                        rows={6}
                    />
                    <button
                        className="button primary"
                        onClick={handleSubmit}
                        disabled={!description.trim()}
                    >
                        Create My Team
                    </button>
                </div>

                <div className="info">
                    <p>
                        Based on your description, our Genesis agent will create an optimal team
                        of AI agents tailored to your project's needs.
                    </p>
                </div>
            </div>
        </div>
    );
};

================
File: src/panels/crew_panel/components/ProjectChanges.tsx
================
import React, { useState } from 'react';
import { Check, X, ChevronDown, ChevronRight, File, Trash, Plus } from 'lucide-react';

interface FileChange {
    path: string;
    content: string;
}

interface ProjectChangesProps {
    changes: {
        filesToModify: FileChange[];
        filesToCreate: FileChange[];
        filesToDelete: string[];
    };
    onAccept: () => void;
    onReject: () => void;
}

export const ProjectChanges: React.FC<ProjectChangesProps> = ({
    changes,
    onAccept,
    onReject
}) => {
    const [expandedFiles, setExpandedFiles] = useState<Set<string>>(new Set());

    const toggleFile = (path: string) => {
        const newExpanded = new Set(expandedFiles);
        if (newExpanded.has(path)) {
            newExpanded.delete(path);
        } else {
            newExpanded.add(path);
        }
        setExpandedFiles(newExpanded);
    };

    const renderFileChange = (file: FileChange, type: 'modify' | 'create') => {
        const isExpanded = expandedFiles.has(file.path);
        return (
            <div key={file.path} className="file-change">
                <div 
                    className="file-header" 
                    onClick={() => toggleFile(file.path)}
                >
                    {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
                    {type === 'create' ? <Plus size={16} /> : <File size={16} />}
                    <span className="file-path">{file.path}</span>
                </div>
                {isExpanded && (
                    <div className="file-content">
                        <pre>{file.content}</pre>
                    </div>
                )}
            </div>
        );
    };

    return (
        <div className="project-changes">
            <h3>Proposed Changes</h3>
            
            {changes.filesToModify.length > 0 && (
                <div className="change-section">
                    <h4>Files to Modify</h4>
                    {changes.filesToModify.map(file => renderFileChange(file, 'modify'))}
                </div>
            )}
            
            {changes.filesToCreate.length > 0 && (
                <div className="change-section">
                    <h4>Files to Create</h4>
                    {changes.filesToCreate.map(file => renderFileChange(file, 'create'))}
                </div>
            )}
            
            {changes.filesToDelete.length > 0 && (
                <div className="change-section">
                    <h4>Files to Delete</h4>
                    {changes.filesToDelete.map(path => (
                        <div key={path} className="file-delete">
                            <Trash size={16} />
                            <span className="file-path">{path}</span>
                        </div>
                    ))}
                </div>
            )}

            <div className="action-buttons">
                <button 
                    className="accept-button" 
                    onClick={onAccept}
                >
                    <Check size={16} />
                    Accept Changes
                </button>
                <button 
                    className="reject-button" 
                    onClick={onReject}
                >
                    <X size={16} />
                    Reject Changes
                </button>
            </div>
        </div>
    );
};

================
File: src/panels/crew_panel/components/TabContent.tsx
================
import React, { ReactNode, Suspense } from 'react';
import { AlertTriangle } from 'lucide-react';

interface TabErrorBoundaryProps {
    children: ReactNode;
    onError: (error: Error) => void;
}

interface TabErrorBoundaryState {
    hasError: boolean;
    error: Error | null;
}

class TabErrorBoundary extends React.Component<TabErrorBoundaryProps, TabErrorBoundaryState> {
    constructor(props: TabErrorBoundaryProps) {
        super(props);
        this.state = { hasError: false, error: null };
    }

    static getDerivedStateFromError(error: Error) {
        return { hasError: true, error };
    }

    componentDidCatch(error: Error) {
        this.props.onError(error);
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="tab-error">
                    <AlertTriangle className="text-red-500" size={24} />
                    <h3 className="text-red-500">Something went wrong</h3>
                    <p className="text-sm text-gray-400">{this.state.error?.message}</p>
                </div>
            );
        }

        return this.props.children;
    }
}

interface TabContentProps {
    children: ReactNode;
    isActive: boolean;
    isLoading: boolean;
    hasError: boolean;
    error: Error | null;
    onError: (error: Error) => void;
    useErrorBoundary?: boolean;
}

export function TabContent({
    children,
    isActive,
    isLoading,
    hasError,
    error,
    onError,
    useErrorBoundary = false
}: TabContentProps) {
    // Only render content when tab is active
    if (!isActive) {
        return null;
    }

    if (!isActive) return null;

    const content = (
        <div
            className="tab-content-container"
            role="tabpanel"
        >
            {isLoading ? (
                <div className="tab-loading">
                    <div className="loading-spinner" />
                    <p>Loading...</p>
                </div>
            ) : hasError ? (
                <div className="tab-error">
                    <AlertTriangle className="text-red-500" size={24} />
                    <h3 className="text-red-500">Error loading content</h3>
                    <p className="text-sm text-gray-400">{error?.message}</p>
                </div>
            ) : (
                <Suspense fallback={<div className="loading-spinner" />}>
                    {children}
                </Suspense>
            )}
        </div>
    );

    if (useErrorBoundary) {
        return (
            <TabErrorBoundary onError={onError}>
                {content}
            </TabErrorBoundary>
        );
    }

    return content;
}

================
File: src/panels/crew_panel/components/TaskList.css
================
.task-list {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.crew-section {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    padding: 16px;
}

.crew-header {
    margin: 0 0 16px 0;
    font-size: 18px;
}

.agent-tasks {
    margin-bottom: 16px;
}

.agent-header {
    margin: 0 0 12px 0;
    font-size: 16px;
    color: var(--vscode-foreground);
    opacity: 0.8;
}

.tasks {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.task-card {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    padding: 12px;
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.task-header h4 {
    margin: 0;
    font-size: 14px;
}

.priority-badge {
    font-size: 12px;
    padding: 2px 6px;
    border-radius: 12px;
}

.priority-badge.high {
    background: var(--vscode-errorForeground);
    color: var(--vscode-editor-background);
}

.priority-badge.medium {
    background: var(--vscode-warningForeground);
    color: var(--vscode-editor-background);
}

.priority-badge.low {
    background: var(--vscode-successForeground);
    color: var(--vscode-editor-background);
}

.task-description {
    margin: 0 0 8px 0;
    font-size: 13px;
    color: var(--vscode-foreground);
    opacity: 0.8;
}

.status-badge {
    font-size: 12px;
    padding: 2px 6px;
    border-radius: 12px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
}

.task-card.completed {
    opacity: 0.7;
}

.task-card.blocked {
    border-color: var(--vscode-errorForeground);
}

================
File: src/panels/crew_panel/components/TaskList.tsx
================
import React from 'react';
import './TaskList.css';

interface Task {
    id: string;
    title: string;
    description: string;
    status: 'pending' | 'in-progress' | 'completed' | 'blocked';
    assignedTo: string;
    crew: string;
    priority: 'high' | 'medium' | 'low';
}

interface TaskListProps {
    tasks: Task[];
}

export const TaskList: React.FC<TaskListProps> = ({ tasks }) => {
    // Group tasks by crew
    const tasksByCrew = tasks.reduce((acc, task) => {
        if (!acc[task.crew]) {
            acc[task.crew] = {};
        }
        if (!acc[task.crew][task.assignedTo]) {
            acc[task.crew][task.assignedTo] = [];
        }
        acc[task.crew][task.assignedTo].push(task);
        return acc;
    }, {} as Record<string, Record<string, Task[]>>);

    return (
        <div className="task-list">
            {Object.entries(tasksByCrew).map(([crew, agentTasks]) => (
                <div key={crew} className="crew-section">
                    <h2 className="crew-header">{crew}</h2>
                    {Object.entries(agentTasks).map(([agent, tasks]) => (
                        <div key={agent} className="agent-tasks">
                            <h3 className="agent-header">{agent}</h3>
                            <div className="tasks">
                                {tasks.map(task => (
                                    <div key={task.id} className={`task-card ${task.status}`}>
                                        <div className="task-header">
                                            <h4>{task.title}</h4>
                                            <span className={`priority-badge ${task.priority}`}>
                                                {task.priority}
                                            </span>
                                        </div>
                                        <p className="task-description">{task.description}</p>
                                        <div className="task-footer">
                                            <span className={`status-badge ${task.status}`}>
                                                {task.status}
                                            </span>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            ))}
        </div>
    );
};

================
File: src/panels/crew_panel/CrewPanel.css
================
/* CrewPanel.css */
.crew-panel {
    height: 100vh;
    display: flex;
    flex-direction: column;
    background: var(--vscode-editor-background);
}

/* Logo section */
.logo-container {
    padding: 12px;
    display: flex;
    align-items: center;
    gap: 12px;
    border-bottom: 1px solid var(--vscode-panel-border);
}

/* Logo */
.logo {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #6366f1, #4f46e5);
    border-radius: 8px;
    flex-shrink: 0;
}

.logo {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #6366f1, #4f46e5);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
    flex-shrink: 0;
}

.logo-container h1 {
    font-size: 18px;
    font-weight: 600;
    color: var(--vscode-foreground);
    margin: 0;
}

/* Tabs navigation */
.tabs-nav {
    display: flex;
    flex-direction: column;
    gap: 2px;
    padding: 4px;
    flex-shrink: 0; /* Prevent tabs from shrinking */
}

/* Main content area */
.tabs-nav {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 8px;
    overflow-y: auto;
}

/* Tab section */
.tab-section {
    display: flex;
    flex-direction: column;
}

/* Tab button */
.tab-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: transparent;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    color: var(--vscode-foreground);
    transition: background-color 0.15s;
    text-align: left;
    min-height: 44px;
}

.tab-button:hover {
    background: var(--vscode-list-hoverBackground);
}

.tab-button.active {
    background: var(--vscode-list-activeSelectionBackground);
    color: var(--vscode-list-activeSelectionForeground);
}

.tab-button .tab-content {
    display: flex;
    flex-direction: column;
    flex: 1;
    gap: 0;
    min-width: 0;
}

.tab-button .tab-label {
    font-size: 13px;
    font-weight: 500;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 20px;
    color: var(--vscode-foreground);
}

.tab-button .tab-description {
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 16px;
    opacity: 0.8;
}

.tab-button .tab-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
    flex-shrink: 0;
    opacity: 0.8;
}

.tab-button .tab-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
    flex-shrink: 0;
    opacity: 0.6;
}

/* Tab content */
.tab-content-container {
    padding: 4px;
    margin-bottom: 8px;
}

/* Card styles */
.card {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    padding: 16px;
    margin-bottom: 8px;
}

.card h2 {
    margin: 0 0 8px 0;
    font-size: 14px;
    font-weight: 600;
}

.card p {
    margin: 0;
    color: var(--vscode-foreground);
    opacity: 0.8;
}

/* Tab button content */
.tab-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    width: 100%;
    background: transparent;
    border: none;
    cursor: pointer;
    color: var(--vscode-foreground);
}

.tab-button .tab-content {
    display: flex;
    flex-direction: column;
    flex: 1;
    gap: 2px;
}

.tab-button .tab-label {
    display: block;
    font-size: 13px;
    font-weight: 500;
}

.tab-button .tab-description {
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.tab-button .tab-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    flex-shrink: 0;
}

.tab-button .tab-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    flex-shrink: 0;
}

/* Tab loading state */
.tab-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    gap: 1rem;
    color: var(--vscode-descriptionForeground);
}

.loading-spinner {
    width: 24px;
    height: 24px;
    border: 2px solid var(--vscode-progressBar-background);
    border-top-color: var(--vscode-focusBorder);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Tab error state */
.tab-error {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    gap: 1rem;
    color: var(--vscode-errorForeground);
    text-align: center;
}

.tab-error h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
}

.tab-error p {
    margin: 0;
    font-size: 0.875rem;
    color: var(--vscode-descriptionForeground);
}

/* Card styles */
.card {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-widget-border);
    border-radius: 6px;
    padding: 16px;
    margin-bottom: 12px;
    transition: all 0.2s ease-in-out;
}

.card:hover {
    border-color: var(--vscode-focusBorder);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.card.active {
    border-color: var(--vscode-focusBorder);
    background: var(--vscode-editor-background);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card h2, .card h3 {
    margin: 0 0 12px;
    font-size: 14px;
    font-weight: 600;
    color: var(--vscode-editor-foreground);
}

.card-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
}

.card-content {
    margin-top: 12px;
    color: var(--vscode-foreground);
    font-size: 13px;
    line-height: 1.5;
}

/* Button styles */
.button {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
}

.button:hover {
    transform: translateY(-1px);
}

.button:active {
    transform: translateY(0);
}

.button.primary {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
}

.button.ghost {
    background: var(--vscode-button-secondaryBackground);
    color: var(--vscode-button-secondaryForeground);
}

.button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.button-group {
    display: flex;
    gap: 8px;
    margin-top: 12px;
}

/* Tab group styles */
.tab-group {
    display: flex;
    flex-direction: column;
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    overflow: hidden;
    transition: all 0.2s ease-in-out;
}

.tab-group:hover {
    border-color: var(--vscode-focusBorder);
}

/* Tab button styles */
.tab-button {
    display: flex;
    align-items: center;
    gap: 8px;
    border: none;
    width: 100%;
    padding: 8px 12px;
    color: var(--vscode-foreground);
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    text-align: left;
}

.tab-button:hover {
    background: var(--vscode-list-hoverBackground);
}

.tab-button.active {
    background: var(--vscode-list-activeSelectionBackground);
    color: var(--vscode-list-activeSelectionForeground);
}

.tab-button .tab-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    flex-shrink: 0;
}

.tab-button .tab-content {
    display: flex;
    flex-direction: column;
    flex: 1;
    min-width: 0;
}

.tab-button .tab-label {
    font-weight: 500;
    font-size: 13px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.tab-button .tab-description {
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.tab-button .tab-text {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 2px;
    flex: 1;
}

.tab-button .tab-label {
    font-weight: 600;
    font-size: 13px;
}

.tab-button .tab-description {
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
}

.tab-button .tab-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    transition: all 0.2s ease-in-out;
}

.tab-button:hover .tab-indicator,
.tab-button.active .tab-indicator {
    opacity: 1;
}

.panel-header {
    padding: 8px 16px;
    background: var(--vscode-editor-background);
    border-bottom: 1px solid var(--vscode-panel-border);
    height: 40px;
}

.panel-title {
    font-size: 13px;
    font-weight: 600;
    color: var(--vscode-sideBarTitle-foreground);
    display: flex;
    align-items: center;
    gap: 8px;
}

.panel-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    padding: 16px;
    gap: 8px;
}

.tab-group {
    display: flex;
    flex-direction: column;
    gap: 1px;
    border: 1px solid var(--vscode-panel-border);
    border-radius: 6px;
    overflow: hidden;
}

	.section-content::-webkit-scrollbar {
    width: 8px;
}

.section-content::-webkit-scrollbar-track {
    background: var(--vscode-scrollbarSlider-background);
    border-radius: 4px;
}

.section-content::-webkit-scrollbar-thumb {
    background: var(--vscode-scrollbarSlider-hoverBackground);
    border-radius: 4px;
}

/* Steps list styles */
.steps-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin: 12px 0;
}

.list-item {
    display: flex;
    align-items: flex-start;
    gap: 8px;
    font-size: 13px;
}

.step-number {
    width: 20px;
    height: 20px;
    border-radius: 10px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 11px;
    font-weight: 600;
    flex-shrink: 0;
}

/* Card styles */
.card {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-widget-border);
    border-radius: 6px;
    padding: 16px;
    margin-bottom: 12px;
    transition: all 0.2s ease-in-out;
}

.card:hover {
    border-color: var(--vscode-focusBorder);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.card.active {
    border-color: var(--vscode-focusBorder);
    background: var(--vscode-editor-background);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card h2, .card h3 {
    margin: 0 0 12px;
    font-size: 14px;
    font-weight: 600;
    color: var(--vscode-editor-foreground);
}

.card-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
}

.card-content {
    margin-top: 12px;
    color: var(--vscode-foreground);
    font-size: 13px;
    line-height: 1.5;
}

/* Button styles */
.button {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
}

.button:hover {
    transform: translateY(-1px);
}

.button:active {
    transform: translateY(0);
}

.button.primary {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
}

.button.ghost {
    background: var(--vscode-button-secondaryBackground);
    color: var(--vscode-button-secondaryForeground);
}

.button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.button-group {
    display: flex;
    gap: 8px;
    margin-top: 12px;
}

.tab-container {
    display: flex;
    flex-direction: column;
    gap: 4px;
    padding: 4px;
    background: transparent;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    position: relative;
}

.tab-container::-webkit-scrollbar {
    display: none;
}

.tab-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px;
    background: transparent;
    border: none;
    border-radius: 4px;
    color: var(--vscode-foreground);
    cursor: pointer;
    width: 100%;
    text-align: left;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    outline: none;
    font-size: 13px;
    margin: 0 0 4px 0;
}

.tab-button:hover {
    background: var(--vscode-list-hoverBackground);
    color: var(--vscode-tab-activeForeground);
}

.tab-button.active {
    background: var(--vscode-list-activeSelectionBackground);
    color: var(--vscode-list-activeSelectionForeground);
}

.tab-content {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    transition: opacity 0.2s ease;
    flex: 1;
}

.tab-text {
    display: flex;
    align-items: start;
    flex-direction: column;
    gap: 2px;
    color: var(--vscode-foreground);
}

.tab-button:focus-visible {
    outline: 2px solid var(--vscode-focusBorder);
    outline-offset: -2px;
}

.tab-button::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 3px;
    height: 0;
    background: var(--vscode-focusBorder);
    transition: height 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

.tab-button.active::before {
    height: 70%;
}

.tab-button:hover {
    background: var(--vscode-list-hoverBackground);
}

.tab-button.active {
    background: var(--vscode-list-activeSelectionBackground);
    color: var(--vscode-list-activeSelectionForeground);
}

.tab-description {
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
    opacity: 0.8;
}

.action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 12px;
    padding: 16px;
}

.action-button {
    display: flex;
    flex-direction: column;
    gap: 4px;
    padding: 12px;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
}

.action-button:hover {
    background: var(--vscode-button-hoverBackground);
}

.action-button-title {
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 8px;
}

.action-button-description {
    font-size: 11px;
    opacity: 0.8;
}

/* Section content styles */
.section-content {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease-in-out;
}

.section-content.active {
    max-height: none;
    opacity: 1;
    padding: 16px;
    visibility: visible;
}

.tab-label {
    font-weight: 500;
}

.tab-indicator {
    display: flex;
    align-items: center;
    opacity: 0.6;
    transition: transform 0.2s ease;
}

.tab-indicator.active {
    opacity: 1;
    transform: translateY(-1px);
}

.tab-button:hover .tab-indicator {
    opacity: 0.8;
}

.tab-container button.list-item {
	background-color: var(--vscode-editor-background);
	color: var(--vscode-tab-inactiveForeground);
	border: none;
	border-radius: 3px;
	margin: 0 2px;
	transition: color 0.1s ease;
}

.tab-button:hover {
    color: var(--vscode-tab-activeForeground);
}

.tab-button.active {
    color: var(--vscode-tab-activeForeground);
    background-color: var(--vscode-tab-activeBackground);
}

/* Messages styles */
.messages-container {
    flex: 1;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding-right: 8px;
}

.message {
    display: flex;
    flex-direction: column;
    max-width: 80%;
}

.message.agent {
    align-self: flex-start;
}

.message.user {
    align-self: flex-end;
}

.message-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 4px;
}

.message-avatar {
    width: 24px;
    height: 24px;
    border-radius: 12px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 11px;
    font-weight: 600;
}

.message-info {
    display: flex;
    flex-direction: column;
}

.message-sender {
    font-size: 12px;
    font-weight: 600;
    color: var(--vscode-editor-foreground);
}

.message-time {
    font-size: 10px;
    color: var(--vscode-descriptionForeground);
}

.message-content {
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-widget-border);
    border-radius: 6px;
    padding: 8px 12px;
    font-size: 13px;
    line-height: 1.4;
    color: var(--vscode-editor-foreground);
}

/* Input styles */
.input-container {
    display: flex;
    gap: 8px;
    padding: 12px;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-widget-border);
    border-radius: 6px;
    position: sticky;
    bottom: 0;
    margin-top: auto;
}

.input-field {
    flex: 1;
    background: var(--vscode-input-background);
    border: 1px solid var(--vscode-input-border);
    color: var(--vscode-input-foreground);
    border-radius: 4px;
    padding: 6px 12px;
    font-size: 13px;
    min-height: 32px;
    font-family: var(--vscode-font-family);
}

.input-field:focus {
    outline: none;
    border-color: var(--vscode-focusBorder);
    box-shadow: 0 0 0 1px var(--vscode-focusBorder);
}

/* Badge styles */
.badge {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 11px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
}

.confidence-badge {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 11px;
    background: var(--vscode-charts-blue);
    color: var(--vscode-editor-background);
}

/* Avatar styles */
.agent-avatar {
    width: 32px;
    height: 32px;
    border-radius: 16px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.agent-info {
    flex: 1;
}

.agent-info h3 {
    margin: 0;
    font-size: 14px;
}

.agent-info p {
    margin: 4px 0 0;
    font-size: 12px;
    color: var(--vscode-descriptionForeground);
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Loading spinner */
.loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--vscode-progressBar-background);
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* Native VS Code Styles */
.list-item {
    padding: 6px 10px;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    border-radius: 3px;
    transition: background-color 0.1s ease;
}

.list-item:hover {
    background: var(--vscode-list-hoverBackground);
}

.list-item.active {
    background: var(--vscode-list-activeSelectionBackground);
    color: var(--vscode-list-activeSelectionForeground);
}

.badge {
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 11px;
    background: var(--vscode-badge-background);
    color: var(--vscode-badge-foreground);
    display: inline-flex;
    align-items: center;
    height: 18px;
}

.confidence-badge {
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 11px;
    background: var(--vscode-statusBarItem-remoteBackground);
    color: var(--vscode-statusBarItem-remoteForeground);
    display: inline-flex;
    align-items: center;
    height: 18px;
}

.step-number {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--vscode-button-secondaryBackground);
    color: var(--vscode-button-secondaryForeground);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 11px;
    font-weight: 500;
}

.card {
    padding: 10px;
    border-radius: 3px;
    border: 1px solid var(--vscode-widget-border);
    margin-bottom: 8px;
    background: var(--vscode-editor-background);
    transition: border-color 0.1s ease;
}

.card:hover {
    border-color: var(--vscode-focusBorder);
}

.card.active {
    background: var(--vscode-editor-selectionBackground);
    border-color: var(--vscode-focusBorder);
}

.button {
    padding: 4px 10px;
    border-radius: 2px;
    cursor: pointer;
    font-size: 13px;
    height: 24px;
    min-width: 65px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    transition: background-color 0.1s ease;
    border: none;
    font-family: var(--vscode-font-family);
}

.button.primary {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
}

.button.primary:hover {
    background: var(--vscode-button-hoverBackground);
}

.button.secondary {
    background: var(--vscode-button-secondaryBackground);
    color: var(--vscode-button-secondaryForeground);
}

.button.secondary:hover {
    background: var(--vscode-button-secondaryHoverBackground);
}

.button.ghost {
    background: transparent;
    color: var(--vscode-foreground);
}

.button.ghost:hover {
    background: var(--vscode-toolbar-hoverBackground);
}

.genesis-mode-btn {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    padding: 6px 12px;
    background: var(--vscode-button-secondaryBackground);
    color: var(--vscode-button-secondaryForeground);
    border: none;
    border-radius: 2px;
    cursor: pointer;
    font-size: 12px;
}

.genesis-mode-btn.active {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
}

.genesis-mode-btn:hover:not(.active) {
    background: var(--vscode-button-secondaryHoverBackground);
}

/* Analysis Mode */
.genesis-analyze {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.analyze-btn {
    width: 100%;
    padding: 8px;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: none;
    border-radius: 2px;
    cursor: pointer;
}

.analyze-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.health-score {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px;
    background: var(--vscode-input-background);
    border-radius: 2px;
}

.score-bar {
    flex: 1;
    height: 6px;
    background: var(--vscode-progressBar-background);
    border-radius: 3px;
    overflow: hidden;
}

.score-fill {
    height: 100%;
    background: var(--vscode-progressBar-foreground);
    transition: width 0.3s ease;
}

.suggestions-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.suggestion-item {
    padding: 8px;
    background: var(--vscode-input-background);
    border-radius: 2px;
    border-left: 3px solid;
}

.suggestion-item.high {
    border-left-color: var(--vscode-testing-iconErrored);
}

.suggestion-item.medium {
    border-left-color: var(--vscode-testing-iconSkipped);
}

.suggestion-item.low {
    border-left-color: var(--vscode-testing-iconPassed);
}

.suggestion-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
}

.suggestion-header .type {
    font-weight: 600;
    font-size: 12px;
}

.suggestion-header .priority {
    font-size: 11px;
    padding: 2px 6px;
    border-radius: 2px;
}

.priority.high {
    background: var(--vscode-testing-iconErrored);
    color: var(--vscode-input-background);
}

.priority.medium {
    background: var(--vscode-testing-iconSkipped);
    color: var(--vscode-input-background);
}

.priority.low {
    background: var(--vscode-testing-iconPassed);
    color: var(--vscode-input-background);
}

.suggestion-item .description {
    font-size: 12px;
    margin: 4px 0;
    color: var(--vscode-foreground);
}

.suggestion-item .impact {
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
}

.suggestion-item .impact span {
    font-weight: 600;
}

/* Generate Mode */
.genesis-generate {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.requirements-input {
    width: 100%;
    min-height: 100px;
    padding: 8px;
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
    border: 1px solid var(--vscode-input-border);
    border-radius: 2px;
    resize: vertical;
}

.generate-btn {
    width: 100%;
    padding: 8px;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: none;
    border-radius: 2px;
    cursor: pointer;
}

.generate-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

/* Review Mode */
.genesis-review {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.review-item {
    padding: 12px;
    background: var(--vscode-input-background);
    border-radius: 2px;
    border: 1px solid var(--vscode-input-border);
}

.review-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
    font-weight: 600;
}

.review-item .context {
    font-size: 12px;
    margin: 8px 0;
    color: var(--vscode-foreground);
    padding: 8px;
    background: var(--vscode-textBlockQuote-background);
    border-radius: 2px;
}

.review-actions {
    display: flex;
    gap: 8px;
    margin-top: 8px;
}

.approve-btn {
    padding: 4px 12px;
    background: var(--vscode-testing-iconPassed);
    color: var(--vscode-input-background);
    border: none;
    border-radius: 2px;
    cursor: pointer;
}

.reject-btn {
    padding: 4px 12px;
    background: var(--vscode-testing-iconErrored);
    color: var(--vscode-input-background);
    border: none;
    border-radius: 2px;
    cursor: pointer;
}

================
File: src/panels/crew_panel/CrewPanel.test.tsx
================
/// <reference types="jest" />

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import CrewPanel from './CrewPanel';
import { VsCodeContext } from '../../index';

// Mock Lucide icons
jest.mock('lucide-react', () => ({
  Users: () => <div data-testid="users-icon" />,
  MessageSquare: () => <div data-testid="message-square-icon" />,
  GitBranch: () => <div data-testid="git-branch-icon" />,
  Bell: () => <div data-testid="bell-icon" />,
  Brain: () => <div data-testid="brain-icon" />,
  PlayCircle: () => <div data-testid="play-circle-icon" />,
  Settings: () => <div data-testid="settings-icon" />,
  Plus: () => <div data-testid="plus-icon" />,
  Send: () => <div data-testid="send-icon" />,
  Menu: () => <div data-testid="menu-icon" />
}));

// Mock Tribe icon
jest.mock('../../icon/Tribe', () => ({
  __esModule: true,
  default: () => <div data-testid="tribe-icon" />
}));

// Mock Flow components
jest.mock('./components/FlowOutput', () => ({
  FlowOutput: ({ flow }: { flow: any }) => (
    <div data-testid="flow-output">
      {flow && (
        <>
          <div>Active Flow: {flow.flowType}</div>
          {flow.proposedChanges?.filesToModify?.map((file: any) => (
            <div key={file.path}>Modify: {file.path}</div>
          ))}
          <button>Accept Changes</button>
        </>
      )}
    </div>
  )
}));

jest.mock('./components/FlowVisualizer', () => ({
  FlowVisualizer: ({ flow }: { flow: any }) => (
    <div data-testid="flow-visualizer">
      {flow && (
        <>
          <div>{flow.name}</div>
          <div>Confidence: {flow.confidence}%</div>
        </>
      )}
    </div>
  )
}));

jest.mock('./components/ProjectChanges', () => ({
  ProjectChanges: ({ changes }: { changes: any }) => (
    <div data-testid="project-changes">
      {changes && <button>Accept Changes</button>}
    </div>
  )
}));

const mockPostMessage = jest.fn();
const mockVsCodeApi = {
  postMessage: mockPostMessage,
  getState: () => ({
    agents: [],
    selectedAgent: null,
    tasks: [],
    messages: [],
    activeFlow: null,
    suggestedFlows: [],
    pendingInstructions: [],
    selectedTab: 'flows'
  }),
  setState: () => {}
};

describe('CrewPanel', () => {
  beforeEach(() => {
    mockPostMessage.mockClear();
  });

  it('renders without crashing', () => {
    render(
      <VsCodeContext.Provider value={mockVsCodeApi}>
        <CrewPanel />
      </VsCodeContext.Provider>
    );
    expect(screen.getByText('Agents')).toBeInTheDocument();
  });

  it('switches between tabs', () => {
    render(
      <VsCodeContext.Provider value={mockVsCodeApi}>
        <CrewPanel />
      </VsCodeContext.Provider>
    );

    // Click on different tabs and verify content changes
    fireEvent.click(screen.getByText('Chat'));
    expect(screen.getByText('Select an agent to start chatting')).toBeInTheDocument();

    fireEvent.click(screen.getByText('Flows'));
    expect(screen.getByText('Generate Flow')).toBeInTheDocument();
  });

  it('handles flow generation', async () => {
    render(
      <VsCodeContext.Provider value={mockVsCodeApi}>
        <CrewPanel />
      </VsCodeContext.Provider>
    );

    // Navigate to Flows tab
    fireEvent.click(screen.getByText('Flows'));

    // Enter flow description
    const input = screen.getByPlaceholderText('Describe what you want to do...');
    fireEvent.change(input, { target: { value: 'Test flow' } });

    // Click generate button
    fireEvent.click(screen.getByText('Generate'));

    // Verify message was sent to VS Code
    await waitFor(() => {
      expect(mockPostMessage).toHaveBeenCalledWith({
        type: 'GENERATE_FLOW',
        payload: { requirements: 'Test flow', context: { currentFile: null } }
      });
    });
  });

  it('displays active flow when present', () => {
    render(
      <VsCodeContext.Provider value={mockVsCodeApi}>
        <CrewPanel activeFlow={{
          flowType: 'test-flow',
          result: null,
          state: null,
          visualizations: [{ type: 'text', content: 'Test visualization' }],
          proposedChanges: {
            filesToModify: [{ path: 'test.ts', content: 'content' }],
            filesToCreate: [],
            filesToDelete: []
          }
        }} />
      </VsCodeContext.Provider>
    );

    fireEvent.click(screen.getByText('Flows'));
    const activeFlowTitle = screen.getByText(/Active Flow: test-flow/);
    expect(activeFlowTitle).toBeInTheDocument();
    expect(screen.getByText(/Modify: test.ts/)).toBeInTheDocument();
  });

  it('handles accepting flow changes', () => {
    const mockFlow = {
      flowType: 'test-flow',
      result: null,
      state: null,
      visualizations: [],
      proposedChanges: {
        filesToModify: [{ path: 'test.ts', content: 'content' }],
        filesToCreate: [],
        filesToDelete: []
      }
    };

    render(
      <VsCodeContext.Provider value={mockVsCodeApi}>
        <CrewPanel activeFlow={mockFlow} />
      </VsCodeContext.Provider>
    );

    fireEvent.click(screen.getByText('Flows'));
    const acceptButton = screen.getByRole('button', { name: /Accept Changes/i });
    fireEvent.click(acceptButton);

    expect(mockPostMessage).toHaveBeenCalledWith({
      type: 'APPLY_CHANGES',
      payload: mockFlow.proposedChanges
    });
  });

  it('displays suggested flows', () => {
    const mockSuggestedFlows = [
      {
        id: '1',
        name: 'Test Flow',
        confidence: 80,
        description: 'A test flow',
        steps: [],
        context: {}
      }
    ];

    render(
      <VsCodeContext.Provider value={mockVsCodeApi}>
        <CrewPanel suggestedFlows={mockSuggestedFlows} />
      </VsCodeContext.Provider>
    );

    fireEvent.click(screen.getByText('Flows'));
    const flowTitle = screen.getByText(/Test Flow/);
    expect(flowTitle).toBeInTheDocument();
    const confidenceText = screen.getByText(/Confidence: 8000%/);
    expect(confidenceText).toBeInTheDocument();
  });
});

================
File: src/panels/crew_panel/CrewPanel.tsx
================
/** @jsx React.createElement */
/** @jsxRuntime classic */

import React, { MouseEventHandler, ReactNode, useState, useEffect, useRef, Suspense } from "react";
import { TabContent } from './components/TabContent';
import { getVsCodeApi } from '../../vscode';
import {
	Brain,
	MessageSquare,
	Users,
	Send,
	ChevronRight,
	ChevronDown,
	Activity,
	ChevronsUp,
	ChevronsDown,
	Rocket,
} from "lucide-react";
import { GetStarted } from './components/GetStarted';
import './CrewPanel.css';
import { ActionPanel } from './components/ActionPanel';
import { AgentCard } from './components/AgentCard';
import { ChatWindow } from './components/ChatWindow';
import { DecisionPanel } from './components/DecisionPanel';
import { TaskList } from './components/TaskList';


// Initialize VS Code API only once
const vscode = getVsCodeApi();

interface Agent {
	id: string;
	name: string;
	role: string;
	status: string;
	backstory: string;
}

interface Message {
	id: string;
	sender: string;
	content: string;
	timestamp: string;
	type: 'user' | 'agent';
}

interface FlowSuggestion {
	id: string;
	name: string;
	confidence: number;
	description: string;
	steps: string[];
	context: any;
}

interface FlowState {
	flowType: string;
	result: any;
	state: any;
	visualizations: any[];
	proposedChanges: {
		filesToModify: Array<{ path: string; content: string }>;
		filesToCreate: Array<{ path: string; content: string }>;
		filesToDelete: string[];
	};
	genesisAnalysis?: {
		suggestions: Array<{
			type: string;
			description: string;
			priority: 'high' | 'medium' | 'low';
			impact: string;
		}>;
		codebaseHealth: number;
	};
}

interface PendingInstruction {
	id: string;
	question: string;
	context: string;
	timestamp: string;
}

interface CrewPanelProps {
	activeFlow?: FlowState;
	suggestedFlows?: FlowSuggestion[];
}

interface ProjectState {
	vision: string;
	currentPhase: string;
	activeAgents: Agent[];
	pendingDecisions: Array<{
		id: string;
		type: 'architecture' | 'implementation' | 'review';
		description: string;
		options: string[];
		impact: 'high' | 'medium' | 'low';
		deadline?: Date;
	}>;
	notifications: Array<{
		id: string;
		type: 'alert' | 'info' | 'success';
		message: string;
		timestamp: Date;
		read: boolean;
	}>;
}

// Utility components
const TabButton = ({
	active,
	onClick,
	icon,
	label,
	description,
	tabIndex = -1
}: {
	active: boolean;
	onClick: MouseEventHandler<HTMLButtonElement>;
	icon: ReactNode;
	label: string;
	description: string;
	tabIndex?: number;
}) => {
	const handleClick: MouseEventHandler<HTMLButtonElement> = (e) => {
		e.preventDefault();
		onClick(e);
	};

	const handleKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {
		if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			onClick(event as any);
		}
	};

	return (
		<button
			className={`tab-button ${active ? 'active' : ''}`}
			onClick={handleClick}
			onKeyDown={handleKeyDown}
			role="tab"
			aria-selected={active}
			aria-controls={`${label.toLowerCase()}-panel`}
			id={`${label.toLowerCase()}-tab`}
			tabIndex={active ? 0 : tabIndex}
		>
			<span className="tab-icon" aria-hidden="true">{icon}</span>
			<div className="tab-content">
				<span className="tab-label">{label}</span>
				<span className="tab-description">{description}</span>
			</div>
			<span className="tab-indicator" aria-hidden="true">
				{active ? <ChevronsUp size={14} /> : <ChevronsDown size={14} />}
			</span>
		</button>
	);
};

const SectionHeader = ({
	title,
	isExpanded,
	onToggle,
	icon
}: {
	title: string;
	isExpanded: boolean;
	onToggle: () => void;
	icon: ReactNode;
}) => (
	<button
		className={`list-item ${isExpanded ? 'active' : ''}`}
		onClick={onToggle}
	>
		{isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
		{icon}
		<span>{title}</span>
	</button>
);

const CrewPanelComponent = ({ activeFlow: initialActiveFlow, suggestedFlows: initialSuggestedFlows }: CrewPanelProps = {}) => {
    // Tab configuration types
    type TabType = 'get-started' | 'overview' | 'agents' | 'messages' | 'tasks' | 'decisions' | 'actions';

    // Initialize VS Code state
    const initialState = vscode.getState() || {
        projectState: {
            initialized: false,
            vision: '',
            currentPhase: '',
            activeAgents: [],
            pendingDecisions: [],
            tasks: [],
            notifications: []
        },
        agents: [],
        messages: []
    };

    // All state declarations
    const [loading, setLoading] = useState(false);
    const [projectState, setProjectState] = useState(initialState.projectState);
    const [messages, setMessages] = useState(initialState.messages);
    const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);
    const [tabLoadingStates, setTabLoadingStates] = useState<Record<TabType, boolean>>({
        'get-started': false,
        'overview': false,
        'agents': false,
        'messages': false,
        'tasks': false,
        'decisions': false,
        'actions': false
    });
    const [tabErrorStates, setTabErrorStates] = useState<Record<TabType, Error | null>>({
        'get-started': null,
        'overview': null,
        'agents': null,
        'messages': null,
        'tasks': null,
        'decisions': null,
        'actions': null
    });
    const [activeTab, setActiveTab] = useState<TabType | null>(projectState.initialized ? 'overview' : 'get-started');
    const [activeFlow, setActiveFlow] = useState<FlowState | null>(initialActiveFlow || null);
    const [suggestedFlows, setSuggestedFlows] = useState<FlowSuggestion[]>(initialSuggestedFlows || []);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [agents, setAgents] = useState<Agent[]>(initialState.agents || []);
    const [currentMessage, setCurrentMessage] = useState('');
    const [requirements, setRequirements] = useState('');
    const [pendingInstructions, setPendingInstructions] = useState<PendingInstruction[]>([]);
    const [isPanelOpen, setIsPanelOpen] = useState(true);
    const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['agents']));
    const [currentMessageId, setCurrentMessageId] = useState('');

    // Tab configuration
    const tabOrder: TabType[] = projectState.initialized
        ? ['overview', 'agents', 'messages', 'tasks', 'decisions', 'actions']
        : ['get-started'];

    const tabConfig: Record<TabType, {
        icon: ReactNode;
        label: string;
        description: string;
        errorBoundary?: boolean;
    }> = {
        'get-started': {
            icon: <Rocket size={16} />,
            label: 'Get Started',
            description: 'Initialize your project'
        },
        overview: {
            icon: <Activity size={16} />,
            label: 'Overview',
            description: 'Project status and active flows'
        },
        agents: {
            icon: <Users size={16} />,
            label: 'Agents',
            description: 'Orchestrate your teams of agents'
        },
        messages: {
            icon: <MessageSquare size={16} />,
            label: 'Messages',
            description: 'Chat with your AI team'
        },
        tasks: {
            icon: <Brain size={16} />,
            label: 'Tasks',
            description: 'Manage and track AI tasks'
        },
        decisions: {
            icon: <MessageSquare size={16} />,
            label: 'Decisions',
            description: 'Review and approve AI decisions'
        },
        actions: {
            icon: <Send size={16} />,
            label: 'Actions',
            description: 'Manually trigger AI operations'
        }
    };

    // Refs
    const messagesEndRef = useRef<HTMLDivElement>(null);

    // Message handling
    const handleMessage = (event: MessageEvent) => {
        const message = event.data;

        switch (message.type) {
            case 'flow-update':
                setActiveFlow((prev: FlowState | null) => prev ? { ...prev, ...message.flow } : message.flow);
                setLoading(false);
                break;
            case 'agents-update':
                setAgents(message.agents);
                break;
            case 'message':
                setMessages((prev: Message[]) => [...prev, message.content]);
                break;
            case 'analysis-complete':
                setLoading(false);
                setSuggestedFlows(message.flows || []);
                setIsAnalyzing(false);
                break;
        }
    };

    useEffect(() => {
        const messageListener = (event: MessageEvent) => handleMessage(event);
        window.addEventListener('message', messageListener);

        // Request initial agents
        vscode.postMessage({ type: 'GET_AGENTS' });

        return () => window.removeEventListener('message', messageListener);
    }, []);

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const handleSendMessage = async () => {
        if (!currentMessage.trim() || !selectedAgent) return;

        const newMessage: Message = {
            id: Date.now().toString(),
            sender: 'User',
            content: currentMessage,
            timestamp: new Date().toISOString(),
            type: 'user' as const
        };

        setMessages((prev: Message[]) => [...prev, newMessage]);
        setCurrentMessage('');
        setLoading(true);

        vscode.postMessage({
            type: 'SEND_MESSAGE',
            payload: {
                message: currentMessage,
                agentId: selectedAgent.id
            }
        });
    };

    const handleAcceptChanges = () => {
        if (!activeFlow?.proposedChanges) return;

        try {
            setLoading(true);
            vscode.postMessage({
                type: 'APPLY_CHANGES',
                payload: activeFlow.proposedChanges
            });
        } catch (error) {
            console.error('Failed to apply changes:', error);
            setLoading(false);
        }
    };

    const handleRejectChanges = () => {
        try {
            setLoading(true);
            vscode.postMessage({
                type: 'REJECT_CHANGES',
                payload: activeFlow?.proposedChanges
            });
            setActiveFlow(null);
        } catch (error) {
            console.error('Failed to reject changes:', error);
        } finally {
            setLoading(false);
        }
    };

    const handlePendingInstruction = (question: string, context: string) => {
        const newInstruction: PendingInstruction = {
            id: Date.now().toString(),
            question,
            context,
            timestamp: new Date().toISOString()
        };

        setPendingInstructions(prev => [...prev, newInstruction]);
        vscode.postMessage({
            type: 'PENDING_INSTRUCTION',
            payload: newInstruction
        });
    };

    const renderHeader = () => (
        <div className="sticky top-0 z-10 backdrop-blur-lg backdrop-filter border-b border-gray-700/30 p-4">
            <div className="flex items-center space-x-3">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-indigo-500 to-indigo-600 flex items-center justify-center shadow-lg shadow-indigo-500/30">
                    <svg className="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                </div>
                <h1 className="text-lg font-semibold text-white">Tribe</h1>
            </div>
            <div className="tab-container">
                {tabOrder.map(tab => {
                    const isActive = activeTab === tab;
                    const config = tabConfig[tab];

                    return (
                        <TabButton
                            key={tab}
                            active={isActive}
                            onClick={() => setActiveTab(isActive ? null : tab)}
                            icon={config.icon}
                            label={config.label}
                            description={config.description}
                        />
                    );
                })}
            </div>
        </div>
    );

    const getPanelClasses = () => {
        const baseClasses = "flex flex-col h-screen border-r border-gray-700/30 transition-all duration-500 ease-in-out";
        return `${baseClasses} ${isPanelOpen ? 'w-full md:w-96' : 'w-16'}`;
    };



    // Tab loading states
    const setTabLoading = (tab: TabType, loading: boolean) => {
        setTabLoadingStates(prev => ({ ...prev, [tab]: loading }));
    };

    const setTabError = (tab: TabType, error: Error | null) => {
        setTabErrorStates(prev => ({ ...prev, [tab]: error }));
    };

    return (
        <div className="crew-panel">
            <div className="logo-container">
                <div className="logo">
                    <svg className="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                </div>
                <h1>Tribe</h1>
            </div>

            {/* Tab Navigation and Content */}
            <nav className="tabs-nav" role="tablist" onKeyDown={(event) => {
                if (!activeTab) {
                    if (event.key === 'ArrowDown' || event.key === 'ArrowRight' || event.key === 'Home') {
                        event.preventDefault();
                        setActiveTab(tabOrder[0]);
                    }
                    return;
                }

                const currentIndex = tabOrder.indexOf(activeTab);
                let nextIndex: number;

                switch (event.key) {
                    case 'ArrowDown':
                    case 'ArrowRight':
                        event.preventDefault();
                        nextIndex = (currentIndex + 1) % tabOrder.length;
                        setActiveTab(tabOrder[nextIndex]);
                        break;

                    case 'ArrowUp':
                    case 'ArrowLeft':
                        event.preventDefault();
                        nextIndex = (currentIndex - 1 + tabOrder.length) % tabOrder.length;
                        setActiveTab(tabOrder[nextIndex]);
                        break;

                    case 'Home':
                        event.preventDefault();
                        setActiveTab(tabOrder[0]);
                        break;

                    case 'End':
                        event.preventDefault();
                        setActiveTab(tabOrder[tabOrder.length - 1]);
                        break;
                }
            }} aria-label="Crew Panel Navigation">
                {tabOrder.map(tab => {
                    const isActive = activeTab === tab;
                    const config = tabConfig[tab];

                    return (
                        <div key={tab} className="tab-section">
                            <TabButton
                                active={isActive}
                                onClick={() => setActiveTab(isActive ? null : tab)}
                                icon={config.icon}
                                label={config.label}
                                description={config.description}
                            />
                            {isActive && (
                                <TabContent
                                    isActive={isActive}
                                    isLoading={tabLoadingStates[tab]}
                                    hasError={!!tabErrorStates[tab]}
                                    error={tabErrorStates[tab]}
                                    onError={(error: Error) => setTabError(tab, error)}
                                    useErrorBoundary={config.errorBoundary}
                                >
                                    {tab === 'get-started' && (
                                        <GetStarted
                                            onSubmit={(description) => {
                                                vscode.postMessage({
                                                    type: 'INITIALIZE_PROJECT',
                                                    payload: { description }
                                                });
                                            }}
                                        />
                                    )}
                                    {tab === 'overview' && (
                                        <div className="overview-content">
                                            <div className="card">
                                                <h2>Project Vision</h2>
                                                <p>{projectState.vision || 'No vision set'}</p>
                                            </div>
                                            <div className="card">
                                                <h2>Current Phase</h2>
                                                <div className="badge">
                                                    {projectState.currentPhase || 'Not started'}
                                                </div>
                                            </div>
                                            {activeFlow && (
                                                <div className="card active">
                                                    <h2>Active Flow</h2>
                                                    <p>{activeFlow.flowType}</p>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                    {tab === 'agents' && (
                                        <div className="agents-content">
                                            {projectState.activeAgents.length === 0 ? (
                                                <div className="empty-state">
                                                    <p>Create a team by describing your project</p>
                                                    <button
                                                        className="button primary"
                                                        onClick={() => setActiveTab('get-started')}
                                                    >
                                                        Get Started
                                                    </button>
                                                </div>
                                            ) : (
                                                projectState.activeAgents.map((agent: Agent) => (
                                                    <AgentCard
                                                        key={agent.id}
                                                        agent={agent}
                                                        selected={selectedAgent?.id === agent.id}
                                                        onSelect={setSelectedAgent}
                                                        onSendMessage={(agentId, message) => {
                                                            vscode.postMessage({
                                                                type: 'SEND_AGENT_MESSAGE',
                                                                payload: { agentId, message }
                                                            });
                                                        }}
                                                        messages={messages.filter((m: Message) =>
                                                            m.sender === agent.name ||
                                                            (m.sender === 'You' && m.type === 'user')
                                                        )}
                                                    />
                                                ))
                                            )}
                                        </div>
                                    )}
                                    {tab === 'messages' && (
                                        <div className="messages-content">
                                            <ChatWindow
                                                messages={messages}
                                                onSendMessage={(message) => {
                                                    if (selectedAgent) {
                                                        vscode.postMessage({
                                                            type: 'SEND_CREW_MESSAGE',
                                                            payload: { message }
                                                        });
                                                    }
                                                }}
                                                disabled={!selectedAgent}
                                                placeholder={selectedAgent ?
                                                    "Type a message to the crew..." :
                                                    "Select an agent to start messaging"}
                                            />
                                        </div>
                                    )}
                                    {tab === 'tasks' && (
                                        <TaskList tasks={projectState.tasks || []} />
                                    )}
                                    {tab === 'decisions' && (
                                        <DecisionPanel
                                            decisions={projectState.pendingDecisions}
                                            onAccept={(decisionId, option) => {
                                                vscode.postMessage({
                                                    type: 'ACCEPT_DECISION',
                                                    payload: { decisionId, option }
                                                });
                                            }}
                                            onReject={(decisionId) => {
                                                vscode.postMessage({
                                                    type: 'REJECT_DECISION',
                                                    payload: { decisionId }
                                                });
                                            }}
                                        />
                                    )}
                                    {tab === 'actions' && (
                                        <ActionPanel
                                            onCreateAgent={(description) => {
                                                vscode.postMessage({
                                                    type: 'CREATE_AGENT',
                                                    payload: { description }
                                                });
                                            }}
                                            onCreateTask={(description) => {
                                                vscode.postMessage({
                                                    type: 'CREATE_TASK',
                                                    payload: { description }
                                                });
                                            }}
                                            onCreateFlow={(description) => {
                                                vscode.postMessage({
                                                    type: 'CREATE_FLOW',
                                                    payload: { description }
                                                });
                                            }}
                                            onCreateTool={(description) => {
                                                vscode.postMessage({
                                                    type: 'CREATE_TOOL',
                                                    payload: { description }
                                                });
                                            }}
                                        />
                                    )}
                                </TabContent>
                            )}
                        </div>
                    );
                })}
            </nav>
        </div>
    );
}



const CrewPanel = React.memo(CrewPanelComponent);

export default CrewPanel;

================
File: src/panels/crew_panel/CrewPanelProvider.ts
================
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as vscode from "vscode";

// Message types for agent management
interface AgentMessage {
    type: string;
    payload: any;
}

// CrewPanelProvider.ts
export class CrewPanelProvider implements vscode.WebviewViewProvider {
    public static readonly viewType = 'crewai.panel';
    private _view?: vscode.WebviewView;

    constructor(
        private readonly _extensionUri: vscode.Uri,
        private readonly _extensionContext: vscode.ExtensionContext
    ) {}

    public resolveWebviewView(
        webviewView: vscode.WebviewView,
        context: vscode.WebviewViewResolveContext,
        _token: vscode.CancellationToken,
    ) {
        this._view = webviewView;

        webviewView.webview.options = {
            enableScripts: true,
            localResourceRoots: [
                this._extensionUri,
                vscode.Uri.joinPath(this._extensionUri, 'out'),
                vscode.Uri.joinPath(this._extensionUri, 'out', 'webview'),
                vscode.Uri.joinPath(this._extensionUri, 'webview')
            ]
        };

        // Setup message handler for this webview
        webviewView.webview.onDidReceiveMessage(this._handleMessage.bind(this));

        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);
        
        // Load initial state
        this._loadInitialState();
    }
    
    private async _handleMessage(message: AgentMessage) {
        switch (message.type) {
            case 'CREATE_AGENT':
                await this._createAgent(message.payload);
                break;
            case 'GET_AGENTS':
                await this._getAgents();
                break;
            case 'SEND_MESSAGE':
                await this._sendAgentMessage(message.payload);
                break;
            case 'CREATE_TASK':
                await this._createTask(message.payload);
                break;
            case 'ANALYZE_REQUIREMENTS':
                await this._analyzeRequirements(message.payload);
                break;
        }
    }
    
    private async _createAgent(payload: any) {
        try {
            // Call Python backend to create agent
            const result = await vscode.commands.executeCommand('tribe.createAgent', payload);
            this._view?.webview.postMessage({ type: 'AGENT_CREATED', payload: result });
        } catch (error) {
            this._view?.webview.postMessage({ type: 'ERROR', payload: error });
        }
    }
    
    private async _getAgents() {
        try {
            // Call Python backend to get agents
            const agents = await vscode.commands.executeCommand('tribe.getAgents');
            this._view?.webview.postMessage({ type: 'AGENTS_LOADED', payload: agents });
        } catch (error) {
            this._view?.webview.postMessage({ type: 'ERROR', payload: error });
        }
    }
    
    private async _sendAgentMessage(payload: any) {
        try {
            const response = await vscode.commands.executeCommand('tribe.sendAgentMessage', payload);
            this._view?.webview.postMessage({ type: 'MESSAGE_RESPONSE', payload: response });
        } catch (error) {
            this._view?.webview.postMessage({ type: 'ERROR', payload: error });
        }
    }
    
    private async _createTask(payload: any) {
        try {
            const task = await vscode.commands.executeCommand('tribe.createTask', payload);
            this._view?.webview.postMessage({ type: 'TASK_CREATED', payload: task });
        } catch (error) {
            this._view?.webview.postMessage({ type: 'ERROR', payload: error });
        }
    }
    
    private async _analyzeRequirements(payload: any) {
        try {
            const result = await vscode.commands.executeCommand('tribe.analyzeRequirements', payload);
            this._view?.webview.postMessage({ type: 'REQUIREMENTS_ANALYZED', payload: result });
        } catch (error) {
            this._view?.webview.postMessage({ type: 'ERROR', payload: error });
        }
    }
    
    private async _loadInitialState() {
        await this._getAgents();
    }

    private _getHtmlForWebview(webview: vscode.Webview) {
        // Get URIs for resources
        const scriptUri = webview.asWebviewUri(
            vscode.Uri.joinPath(this._extensionUri, 'out', 'webview', 'main.js')
        );
        const styleUri = webview.asWebviewUri(
            vscode.Uri.joinPath(this._extensionUri, 'out', 'webview', 'style.css')
        );
        const mediaUri = webview.asWebviewUri(
            vscode.Uri.joinPath(this._extensionUri, 'webview', 'src', 'media')
        );

        // Use a nonce to only allow specific scripts to be run
        const nonce = getNonce();

        return `<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${webview.cspSource} https: data:; style-src ${webview.cspSource} 'unsafe-inline'; script-src ${webview.cspSource} 'nonce-${nonce}' 'unsafe-inline' 'unsafe-eval'; connect-src ${webview.cspSource} https:; frame-src vscode-webview:;">
                <link href="${styleUri}" rel="stylesheet">
                <title>Tribe</title>
            </head>
            <body>
                <div id="root"></div>
                <script nonce="${nonce}">
                    // Initialize VS Code API and store it globally
                    try {
                        const vscode = acquireVsCodeApi();
                        window.vscode = vscode;
                        window.__vscMediaPath = '${mediaUri}';
                    } catch (e) {
                        console.error('Failed to acquire VS Code API:', e);
                    }
                        
                        try {
                            const api = acquireVsCodeApi();
                            window.vscodeApi = api;
                            return api;
                        } catch (error) {
                            console.error('Failed to acquire VS Code API:', error);
                            return {
                                postMessage: (msg) => console.log('VS Code API not available:', msg),
                                getState: () => ({}),
                                setState: () => {}
                            };
                        }
                    })();
                    window.vscMediaUrl = "${mediaUri}";
                </script>
                <script nonce="${nonce}" src="${scriptUri}"></script>
            </body>
            </html>`;
    }
}

function getNonce() {
    let text = '';
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (let i = 0; i < 32; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}

================
File: src/styles/components.css
================
/* Notification Center */
.notification-center {
    @apply relative;
}

.notification-badge {
    @apply relative cursor-pointer p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800;
}

.notification-count {
    @apply absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center;
}

.notification-list {
    @apply absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden z-50;
}

.notification-item {
    @apply flex items-start p-4 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer border-b border-gray-200 dark:border-gray-700;
}

.notification-item.unread {
    @apply bg-blue-50 dark:bg-blue-900;
}

.notification-content {
    @apply ml-3 flex-1;
}

.notification-message {
    @apply text-sm text-gray-800 dark:text-gray-200;
}

.notification-time {
    @apply text-xs text-gray-500 dark:text-gray-400;
}

/* Decision Hub */
.decision-hub {
    @apply p-4;
}

.decision-list {
    @apply space-y-4;
}

.decision-card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-4;
}

.decision-header {
    @apply flex justify-between items-center mb-4;
}

.impact-badge {
    @apply px-2 py-1 rounded-full text-xs font-medium;
}

.deadline {
    @apply flex items-center text-sm text-gray-500 dark:text-gray-400 space-x-1;
}

.decision-content {
    @apply space-y-3;
}

.decision-type {
    @apply text-lg font-semibold text-gray-900 dark:text-gray-100 capitalize;
}

.decision-description {
    @apply text-sm text-gray-700 dark:text-gray-300;
}

.decision-options {
    @apply flex flex-wrap gap-2 mt-2;
}

.option-button {
    @apply px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600;
}

.decision-actions {
    @apply flex justify-end space-x-2 mt-4;
}

.approve-button {
    @apply flex items-center space-x-1 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600;
}

.reject-button {
    @apply flex items-center space-x-1 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600;
}

/* Project Overview */
.project-overview {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6;
}

.vision-section {
    @apply mb-6;
}

.vision-header {
    @apply text-xl font-semibold mb-2 text-gray-900 dark:text-gray-100;
}

.vision-content {
    @apply text-gray-700 dark:text-gray-300;
}

.phase-indicator {
    @apply flex items-center space-x-2 mt-4;
}

.phase-label {
    @apply text-sm font-medium text-gray-500 dark:text-gray-400;
}

.phase-value {
    @apply text-sm font-semibold text-blue-500;
}

/* Agent Cards */
.agent-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
}

.agent-card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow;
}

.agent-header {
    @apply flex items-center space-x-3 mb-3;
}

.agent-avatar {
    @apply w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white font-bold text-lg;
}

.agent-info {
    @apply flex-1;
}

.agent-name {
    @apply font-semibold text-gray-900 dark:text-gray-100;
}

.agent-role {
    @apply text-sm text-gray-500 dark:text-gray-400;
}

.agent-status {
    @apply text-xs px-2 py-1 rounded-full;
}

.agent-status.active {
    @apply bg-green-100 text-green-800;
}

.agent-status.idle {
    @apply bg-yellow-100 text-yellow-800;
}

.agent-status.busy {
    @apply bg-red-100 text-red-800;
}

================
File: src/index.tsx
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import './style.css';
import CrewPanel from './panels/crew_panel/CrewPanel';
import { getVsCodeApi } from './vscode';

// Create React context for VS Code API
export const VsCodeContext = React.createContext<ReturnType<typeof getVsCodeApi>>(getVsCodeApi());

// Initialize VS Code API before React starts
const vscode = getVsCodeApi();

// Ensure VS Code API is available globally
(window as any).vscode = vscode;

const container = document.getElementById('root');
if (!container) throw new Error('Root element not found');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <VsCodeContext.Provider value={vscode}>
      <CrewPanel />
    </VsCodeContext.Provider>
  </React.StrictMode>
);

================
File: src/setupTests.ts
================
import '@testing-library/jest-dom';

// Mock VS Code API
const mockPostMessage = jest.fn();
const mockGetState = jest.fn(() => ({}));
const mockSetState = jest.fn();

(global as any).acquireVsCodeApi = () => ({
  postMessage: mockPostMessage,
  getState: mockGetState,
  setState: mockSetState
});

================
File: src/style.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/vscode.ts
================
export type VSCodeApi = {
    postMessage(message: any): void;
    getState(): any;
    setState(state: any): void;
};

declare global {
    interface Window {
        acquireVsCodeApi(): VSCodeApi;
        vscodeApi: VSCodeApi;
        vscode: VSCodeApi;
    }
}

export function getMediaPath(): string {
    return (window as any).__vscMediaPath || '';
}

// Suppress DevTools protocol errors
const originalError = console.error;
console.error = (...args) => {
    if (typeof args[0] === 'string' && 
        (args[0].includes('Autofill.') || args[0].includes('vscode-webview'))) {
        return;
    }
    originalError.apply(console, args);
};

export function getVsCodeApi(): VSCodeApi {
    if (window.vscode) {
        return window.vscode;
    }

    try {
        // Try to acquire the VS Code API
        const api = window.acquireVsCodeApi();
        window.vscode = api; // Cache it for future use
        return api as VSCodeApi;
    } catch (e) {
        console.error('Failed to acquire VS Code API:', e);
        // Return a mock API for development/testing
        return {
            postMessage: (message: any) => {
                console.log('VS Code API not available, message not sent:', message);
            },
            getState: () => ({}),
            setState: () => {}
        };
    }
}

================
File: jest.config.js
================
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  moduleNameMapper: {
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '^./vscode$': '<rootDir>/src/__mocks__/vscode.ts',
    '^../../index$': '<rootDir>/src/__mocks__/index.tsx'
  },
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
  transform: {
    '^.+\\.(ts|tsx)$': ['ts-jest', {
      tsconfig: 'tsconfig.json'
    }]
  },
  moduleDirectories: ['node_modules', 'src']
};

================
File: package.json
================
{
    "name": "tribe-webview",
    "version": "1.0.0",
    "private": true,
    "scripts": {
        "build": "webpack --config webpack.config.js",
        "watch": "webpack --watch --config webpack.config.js",
        "test": "jest"
    },
    "dependencies": {
        "@tailwindcss/postcss": "^4.0.5",
        "lucide-react": "^0.330.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0"
    },
    "devDependencies": {
        "@svgr/webpack": "^8.1.0",
        "@testing-library/jest-dom": "^6.6.3",
        "@testing-library/react": "^16.2.0",
        "@types/jest": "^29.5.14",
        "@types/jsdom": "^21.1.7",
        "@types/react": "^18.2.55",
        "@types/react-dom": "^18.2.19",
        "autoprefixer": "^10.4.16",
        "css-loader": "^6.8.1",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^29.7.0",
        "jsdom": "^26.0.0",
        "mini-css-extract-plugin": "^2.7.6",
        "postcss": "^8.4.31",
        "postcss-loader": "^7.3.3",
        "style-loader": "^3.3.3",
        "tailwindcss": "^3.3.5",
        "ts-jest": "^29.2.5",
        "ts-loader": "^9.5.1",
        "typescript": "^5.3.3",
        "webpack": "^5.97.1",
        "webpack-cli": "^5.1.4"
    },
    "files": [
        "./src/media"
    ]
}

================
File: postcss.config.js
================
// tribe/webview/postcss.config.js
const path = require('path');

module.exports = {
  plugins: {
    tailwindcss: {
      config: path.resolve(__dirname, './tailwind.config.js')
    },
    autoprefixer: {}
  }
};

================
File: tailwind.config.js
================
const path = require('path');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // Webview source files
    path.join(__dirname, './src/**/*.{js,jsx,ts,tsx}'),
    // Parent tribe source files
    path.join(__dirname, '../src/**/*.{js,jsx,ts,tsx}'),
    // Built files
    path.join(__dirname, '../out/webview/**/*.{js,jsx,ts,tsx}')
  ],
  theme: {
    extend: {},
  },
  plugins: [],
  corePlugins: {
    preflight: false,
  }
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "lib": ["DOM", "ES2020"],
    "jsx": "react",
    "strict": true,
    "moduleResolution": "node",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },
    "typeRoots": [
      "./node_modules/@types",
      "./src/types"
    ]
  },
  "include": [
    "src/**/*"
  ]
}

================
File: webpack.config.js
================
const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  mode: 'production',
  target: 'web',
  context: __dirname,
  entry: './src/index.tsx',
  output: {
    path: path.resolve(__dirname, '../out/webview'),
    filename: 'main.js',
    clean: true
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx']
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: 'style.css'
    }),
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'src/media'),
          to: path.resolve(__dirname, '../out/webview/media')
        }
      ]
    })
  ],
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: [
          {
            loader: 'ts-loader',
            options: {
              configFile: path.resolve(__dirname, './tsconfig.json'),
              compilerOptions: {
                jsx: 'react-jsx'
              }
            }
          }
        ],
        exclude: /node_modules/
      },
      {
        test: /\.svg$/,
        use: ['@svgr/webpack']
      },
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  ['tailwindcss', {
                    config: path.resolve(__dirname, './tailwind.config.js')
                  }],
                  ['autoprefixer', {}]
                ]
              }
            }
          }
        ]
      },
      {
        test: /\.svg$/,
        type: 'asset/resource',
        generator: {
          filename: 'media/[name][ext]'
        }
      }
    ]
  },
  performance: {
    hints: 'warning',
    maxEntrypointSize: 512000,
    maxAssetSize: 512000
  },
  devtool: process.env.NODE_ENV === 'development' ? 'source-map' : false
};



================================================================
End of Codebase
================================================================
